{$UNDEF SCRIPT_ID}{$DEFINE SCRIPT_ID := '928ed577-393d-476c-ae84-a5670c9f9fae'}
{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '9'}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}
{$I WaspLib/osr/handlers/teleports/transport.simba}

type
  TeleportItemType = (
    RING_OF_DUELING,
    AMULET_OF_GLORY,
    AMULET_OF_ETERNAL_GLORY,
    CRAFTING_CAPE,
    MAX_CAPE
  );

  Background = (
    WASP,
    RANDOMBG,
    SABER,
    CHIKA,
    HAYASAKA,
    SHINOBU,
    MEGUMIN,
    AYAKA
  );
//==============================================================================
// I want to give a huge thanks to the whole wasp community for being amazing!
//==============================================================================
// Special credit to Torwent and Flight as their runecrafting scripts helped me
// directly with some of the code here in this script. I also want to give special
// thanks to Slacky, Olly and once again Torwent for the development of SRL, Simba
// and Wasp.
//==========================SETTINGS============================================
begin
  Login.PlayerIndex := 0;
end;

var
  TELEPORTITEM: TeleportItemType         = RING_OF_DUELING; //teleport item
  PRAYERTHRESHOLD: Int32                 = 15; //when to drink prayer
  SCRIPTSPEED: Int32                     = 100;// 0-110, 100 is fastest 100-110 increases mouse speed

  ADAPTIVEWALK: Boolean                  = True;
  PRAY: Boolean                          = True;
  DESERTAMULET: Boolean                  = False;
//==============================================================================

type
  EWrathCrafterState = (
    NULL_STATE,

    ENTER_STATUE, ENTER_CAVE,
    NAVIGATE_CORNER, ENTER_RUINS,

    CRAFT_RUNES, EMPTY_POUCH,

    OPEN_BANK, DRINK_PRAYER,
    WITHDRAW_PRAYER, DRINK_STAMINA,
    WITHDRAW_STAMINA, WITHDRAW_FOOD,
    EAT_FOOD, FILL_POUCH,
    CLOSE_INTERFACE,

    WITHDRAW_ESS, EQUIP_RING,
    WITHDRAW_RING, WITHDRAW_GLORY,
    UNEQUIP_GLORY, EQUIP_GLORY,
    DEPOSIT_RUNES, DEPOSIT_RANDOM,

    TALK_MAGE, CALL_MAGE,
    CLICK_STATUE,

    TELEPORT_GUILD, TELEPORT_BANK, TELEPORT_NARDAH
  );

  TWrathRunecrafter = record(TBaseBankScript)
    State: EWrathCrafterState;
    Transport: TUniversalTransport;
    Position: TPoint;
    MythGuildBox, MythGuildBasementBox, MythGuildIslandBox, WrathAltarBox,
    CastleWarsBox, EdgevilleBox, CraftingGuildBox, FullMythGuildBox,
    NardahBox, MythGuildLadderBox: TBox;

    PouchCount, MaxHealth, RingPrice, EssPrice, WrathPrice, PrayerPrice,
    StamPrice, NpcContactPrice, PouchSlot, RingOfDuelTries, CraftRunesClicks: Int32;

    Teleport, PrayerPotion, StaminaPotion, Essence, Pouch, Ring: TRSBankItem;
    DegradedPouch, Cape, Amulet: TRSItem;

    KeepItemArray: TRSItemArray;

    PouchFull, WithdrawRing, WithdrawGlory, UnequipGlory, NeedsStatue, InventoryHasEss,
    PouchDegraded, DepositedRunes: Boolean;
  end;

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.TOTAL, ERSSkill.RUNECRAFTING];
  Self.MinZoom := 3;
  Self.MaxZoom := 15;

  inherited;
end;

function TWrathRunecrafter.WaitMinimapChange(): Boolean;
begin
  Result := SRL.IsAnimating(Minimap.Bounds(), 7000, 150, 20);
end;


function TRSInventory.QuickShiftDrop(Items: TRSItemArray; Pattern: TIntegerArray = DROP_PATTERN_REGULAR): Boolean;//
var
  I: Int32;
  Circle: TCircle;
  Boxes: TBoxArray;
  Slots,Order: TIntegerArray;
begin
  if (Length(Items) = 0) then
    Exit;

  if Self.FindItems(Items, Slots) then
  begin
    Result := True;
    for I := 0 to High(Pattern) do
      if Pattern[I] in Slots then
        Order += Pattern[I];
  end;

  IsKeyDown(VK_SHIFT); // Clear cache
  KeyUp(VK_SHIFT);

  Boxes := Self.GetSlotBoxes;

  try
    if not IsKeyDown(VK_SHIFT) then
    begin
      KeyDown(VK_SHIFT);
      Wait(50,100,wdLeft); // Fix provided by Slacky <3
    end;
    for i:=0 to high(Order) do
    begin
      if Self.IsSlotUsed(Order[I]) then
      begin
        Mouse.Move(Self.GetSlotBox(Order[I]));
        Mouse.Click(MOUSE_LEFT);

        // Spam click a little
        for 1 to SRL.TruncatedGauss(0, 3) do
        begin
          Circle.X := Mouse.Position().X;
          Circle.Y := Mouse.Position().Y;
          Circle.Radius := 5;

          Mouse.Click(Circle, MOUSE_LEFT, True);
        end;

        WaitEx(35,5);
      end;
    end;
  finally
    if IsKeyDown(VK_SHIFT) then
      KeyUp(VK_SHIFT);
  end;

  KeyUp(VK_SHIFT);
end;

procedure TWrathRunecrafter.WithdrawFood();
begin
  FoodHandler.MinInvPoints := Self.MaxHealth - MiniMap.GetHPLevel();
  Bank.WithdrawConsumable(ERSConsumable.FOOD);
end;

procedure TWrathRunecrafter.DepositRunes();
var
  runeCount, slot: Int32;
begin
    Inventory.FindItem('Wrath rune', slot);
    runeCount := Inventory.ItemInterface.CountStack(slot);
    Bank.GetButton(ERSBankButton.QUANTITY_ALL).Enable();
    Inventory.ClickSlot(slot, 'Deposit-All');

    Self.TotalActions += runeCount;
    Self.TotalProfit += runeCount * Self.WrathPrice;
    if Self.Essence.Item = 'Pure essence' then
      Self.TotalProfit -= runeCount * Self.EssPrice;//TODO do this on craft im lazy

    StatsPayload.Update(0, runeCount * (Self.WrathPrice - Self.EssPrice), 0);

    Self.DepositedRunes := True;
end;

procedure TWrathRunecrafter.EatFood();
begin
  //TODO remove food cost from profit
  Inventory.Consume(ERSConsumable.FOOD);
end;

function TWrathRunecrafter.ClickStatue(): Boolean;
begin
  Result := RSObjects.ElidinisStatue.Click();
  if Result then
  begin
    Minimap.WaitMoving();
    WaitUntil(Minimap.GetRunEnergy = 100, 100, 1000);
    Self.NeedsStatue := False;
  end;
end;

procedure TWrathRunecrafter.DrinkPotion(potion: String);
begin
  if potion.contains('Stam') then
  begin
    Self.TotalProfit -= Self.StamPrice;
    StatsPayload.Update(0, -Self.StamPrice, 0);
  end;
  if potion.contains('Pray') then
  begin
    Self.TotalProfit -= Self.PrayerPrice;
    StatsPayload.Update(0, -Self.PrayerPrice, 0);
  end;

  Inventory.ClickItem(potion, 'Drink');
  Wait(200,300);
end;

procedure TWrathRunecrafter.DrinkPrayerPotion();
begin
  if Inventory.ContainsItem('Prayer potion(1)') then
    Self.DrinkPotion('Prayer potion(1)')
  else if Inventory.ContainsItem('Prayer potion(2)') then
    Self.DrinkPotion('Prayer potion(2)');
  Wait(200, 300);
end;


function TWrathRunecrafter.LowHealth(): Boolean;
begin
  Result := Minimap.GetHPLevel() < Antiban.GetUniqueNumber(35, 45, 65);
end;

function TWrathRunecrafter.LowEnergy(): Boolean;
begin
  Result := not Minimap.HasStamina() and (Minimap.GetRunEnergy() < Antiban.GetUniqueNumber(35, 30, 50));
end;

function TWrathRunecrafter.LowPrayer(): Boolean;
begin
  Result := Minimap.GetPrayerLevel() < Antiban.GetUniqueNumber(35, PRAYERTHRESHOLD - 5, PRAYERTHRESHOLD + 10);
end;


function TWrathRunecrafter.ShouldTeleportNardah(): Boolean;
begin
  Result := Self.LowPrayer() or Self.LowHealth() or Self.LowEnergy();
end;

procedure TWrathRunecrafter.DoUnequipGlory();
begin
  if Equipment.ClickItem('Amulet of glory', 'Remove') then
  begin
    Self.WithdrawGlory := True;
  end;
end;

function TWrathRunecrafter.OpenBank(): Boolean;
begin
  WriteLn('Teleport item: ', TELEPORTITEM);
  case TELEPORTITEM of
    RING_OF_DUELING: Self.WithdrawRing := not Equipment.ContainsItem('Ring of Dueling(1)');
    AMULET_OF_GLORY:
    begin
      writeln Equipment.ContainsItem('Amulet of glory(1)');
      if not Equipment.ContainsItem('Amulet of glory(1)') then
        Self.DoUnequipGlory();
    end;
  end;

  Result := Bank.WalkOpen();
end;

procedure TWrathRunecrafter.UseCraftingCape();
var
  slots: TIntegerArray;
begin
  if (Self.cape = 'Crafting cape') or (Self.cape = 'Crafting cape(t)') then
    Equipment.ClickItem(Self.cape, 'Teleport')
  else
  begin
    Inventory.FindItems(['Crafting cape(t)', 'Crafting cape'], slots);
    Inventory.ClickSlot(slots[0], 'Teleport');
  end;

  Self.WaitMinimapChange();
end;

procedure TWrathRunecrafter.UseMaxCape();
var
  capeString: String;
begin
  capeString := VarToStr(Self.Cape);
  if capeString.Contains('ax cape') then
    Equipment.ClickItem(Self.cape, 'Crafting Guild');

  Self.WaitMinimapChange();
end;

procedure TWrathRunecrafter.TeleportNardah();
begin
  if Self.Amulet = 'Desert amulet 4' then
    Equipment.ClickItem('Desert amulet 4', 'Nardah')
  else
    Inventory.ClickItem('Desert amulet 4', 'Nardah');

  Self.NeedsStatue := true;
  Self.WaitMinimapChange();
end;

procedure TWrathRunecrafter.UseEternalGlory();
begin
  if Self.Amulet = 'Amulet of eternal glory' then
    Equipment.ClickItem('Amulet of eternal glory', 'Edgeville')
  else
  begin
    Inventory.ClickItem('Amulet of eternal glory', 'Rub');
    WaitUntil(Chat.FindOption('Edgeville'), 200, 2000);
    Chat.ClickOption('Edgeville');
    Exit();
  end;

  Self.WaitMinimapChange();
end;

procedure TWrathRunecrafter.UseGlory();
begin
  Self.Transport.handleJewelleryTeleport(RSTeleports.EDGEVILLE);

end;

procedure TWrathRunecrafter.UseRingOfDueling();
begin
  if Equipment.ClickItem('Ring of Dueling(1)', 'Castle Wars')  then
  begin
    Self.WaitMinimapChange();
    Self.RingofDuelTries := 0;
    Exit;
  end;

  Self.RingofDuelTries += 1;
  if Self.RingofDuelTries >= 5 then
    TerminateScript("Can't find ring of dueling");
end;

procedure TWrathRunecrafter.TeleportBank();
begin
  case TELEPORTITEM of
    RING_OF_DUELING: Self.UseRingOfDueling();
    AMULET_OF_GLORY: Self.UseGlory();
    AMULET_OF_ETERNAL_GLORY: Self.UseEternalGlory();
    CRAFTING_CAPE: Self.UseCraftingCape();
    MAX_CAPE: Self.UseMaxCape();
  end;
end;


procedure TWrathRunecrafter.CallMage();
begin
  if Magic.ClickSpell(ERSSpell.NPC_CONTACT, 'Dark Mage') then
  begin
    StatsPayload.Update(0, -Self.NpcContactPrice, 0);
    Self.TotalProfit -= Self.NpcContactPrice;
    WaitUntil((Chat.GetChatTitle() = 'Dark Mage'), 300, 10000);
  end;
end;

procedure TWrathRunecrafter.TalkMage();
var
  Finished: Boolean;
begin
  Chat.ChatToOption('Can you repair');
  WaitUntil(Chat.HasContinue(), 100, 5000);

  repeat
    Chat.ClickContinue(True);
    Finished := not Chat.HasContinue();
  until Finished;

  Self.PouchDegraded := False;
end;

procedure TWrathRunecrafter.EquipRing();
begin
  if Inventory.ClickItem(Self.Ring.Item, 'Wear') then
  begin
    Self.TotalProfit -= Self.RingPrice;
    StatsPayload.Update(0, -Self.RingPrice, 0);
  end;
end;

procedure TWrathRunecrafter.TeleportGuild();
begin

  if Self.Cape = 'Mythical cape' then
    Equipment.ClickItem('Mythical cape', 'Teleport')
  else
  begin
    Inventory.open();
    Inventory.ClickItem('Mythical cape', 'Teleport');
  end;
  Self.DepositedRunes := False;
  Self.WaitMinimapChange();
end;

procedure TWrathRunecrafter.FillPouch();
var
  essCountBefore, essCountAfter: Int32;
  box: TBox;
begin
  essCountBefore := Inventory.CountItem(Self.Essence.item);
  //Inventory.ClickItem(Self.Pouch.Item, 'Fill');
  Inventory.ItemInterface.ClickItem(Self.Pouch.Item, MOUSE_RIGHT);
  if ChooseOption.HasOption('Fill', False, False) then
    ChooseOption.Select('Fill')
  else if ChooseOption.HasOption('Empty', False, False) then
  begin
    ChooseOption.Close();
    Self.PouchCount := 40;
    Self.PouchFull := True;
    Exit();
  end;
  if Bank.FindItem(Self.Essence.item, box) then
    Mouse.move(box);
  WaitUntil(Inventory.CountItem(Self.Essence.item) < essCountBefore, 100, 1000);
  essCountAfter := Inventory.CountItem(Self.Essence.item);
  Self.PouchCount += essCountBefore - essCountAfter;
  if essCountAfter = 0 then
    Self.InventoryHasEss := False;
  if Self.PouchCount = 40 then
    Self.PouchFull := True;
  if Inventory.ContainsItem(Self.DegradedPouch) then
    Self.PouchDegraded := True;
end;

procedure TWrathRunecrafter.EmptyPouch();
var
  essCountBefore, essCountAfter: Int32;
begin
  essCountBefore := Inventory.CountItem(Self.Essence.item);
  Inventory.QuickShiftDrop([Self.Pouch.Item],DROP_PATTERN_REGULAR);
  RSObjects.RCAltar.Hover();
  if not WaitUntil(Inventory.ContainsItem(Self.Essence.Item), 10, 1000) then
  begin
    Self.PouchCount := 0;
    Self.PouchFull := False;
    Exit();
  end;
  essCountAfter := Inventory.CountItem(Self.Essence.item);
  Self.PouchCount += essCountBefore - essCountAfter;
  if essCountAfter > 0 then
    Self.InventoryHasEss := True;
  if Self.PouchCount = 0 then
  begin
    Self.PouchFull := False;
  end;
end;

procedure TWrathRunecrafter.NavigateCorner();
var
  minimapPoint, P: TPoint;
  randomness: Int32;
begin
  minimapPoint := RSW.WorldToMM(Self.RSW.GetMyPos(), [9399, 5599], Minimap.GetCompassAngle(False));

  if (not Minimap.IsPointOn(minimapPoint)) then
    Exit();

  randomness := SRL.SkewedRand(6, 4, 10);

  P := minimapPoint.Random(-randomness, randomness);
  while not Minimap.IsPointOn(P) do
    P := minimapPoint.Random(-randomness, randomness);

  Mouse.Move(P);
  Mouse.Click(MOUSE_LEFT);

  wait(3000, 6500);
  if PRAY then
    Minimap.EnablePrayer();
  Minimap.WaitFlag(5);
end;

procedure TWrathRunecrafter.EnterCave();
begin
  try
    if RSObjects.MythicCave.WalkClick() then
    begin
      Minimap.WaitPlayerMoving();
      Self.WaitMinimapChange();
    end;
  except
    Exit();
  end;
end;


procedure TAntiban.TakeBreak(var Task: TBreakTask); override;
begin
  if PRAY then
      Minimap.DisablePrayer();
  inherited;
end;


procedure TWrathRunecrafter.EnterStatue();
begin
  try
    if RSObjects.MythicStatue.WalkClick() then
    begin
      Minimap.WaitPlayerMoving();
      Self.WaitMinimapChange();
    end;
  except
    Exit();
  end;
end;

procedure TWrathRunecrafter.EnterRuins();
begin
  try
    if RSObjects.MysteriousRuins.Click() then
    begin
      if PRAY then
        begin
        Minimap.DisablePrayer();
        Mouse.Move(Mainscreen.Bounds());
        end;
      Minimap.WaitPlayerMoving();
    end;
  except
    Exit();
  end;
end;

function TWrathRunecrafter.InBox(box: TBox): Boolean;
begin
  if inRange(Self.Position.X, box.X1, box.X2) and inRange(Self.Position.Y, box.Y1, box.Y2) then
    Result := True
  else
    Result := False;
end;

function TWrathRunecrafter.NearBank(): Boolean;
begin
  Result := Self.InBox(Self.CastleWarsBox) or Self.InBox(Self.EdgevilleBox)
            or Self.InBox(Self.CraftingGuildBox);
end;

procedure TWrathRunecrafter.EquipGlory();
begin
  Inventory.ClickItem('Amulet of glory', 'Wear');
end;

procedure TWrathRunecrafter.BankWithdrawGlory();
var                                               //TODO REDO
  bankItem: TRSBankItem;
begin
  bankItem := TRSBankItem.Setup(Self.Amulet, 1);
  if Self.Withdraw(bankItem) then;
    Self.WithdrawGlory := False;
end;

procedure TWrathRunecrafter.BankWithdrawRing();
begin
  Self.Withdraw(self.Ring);
  if WaitUntil(Inventory.ContainsItem(Self.Ring.Item), 300, 6000) then
    Self.WithdrawRing := False;
end;

procedure TWrathRunecrafter.WithdrawEss();
begin
  if Self.Withdraw(self.Essence) then
    Self.InventoryHasEss := True;
end;

function TWrathRunecrafter.ParsePouchInt(number: String): Int32;
var
  StrArray: TStringArray;
begin
  //zero-twenty, thirty, forty
  if not number.Contains('-') then
    case number of
      'no': Exit(0);
      'one': Exit(1);
      'two': Exit(2);
      'three': Exit(3);
      'four': Exit(4);
      'five': Exit(5);
      'six': Exit(6);
      'seven': Exit(7);
      'eight': Exit(8);
      'nine': Exit(9);
      'ten': Exit(10);
      'eleven': Exit(11);
      'twelve': Exit(12);
      'thirteen': Exit(13);
      'fourteen': Exit(14);
      'fifteen': Exit(15);
      'sixteen': Exit(16);
      'seventeen ': Exit(17);
      'eighteen': Exit(18);
      'nineteen': Exit(19);
      'twenty': Exit(20);
      'thirty': Exit(30);
      'forty': Exit(40);
    end;

  //21-29, 31-39
  StrArray := number.Explode('-');
  case StrArray[0] of
    'twenty': Result += 20;
    'thirty': Result += 30;
  end;
  case StrArray[1] of
    'one': Result += 1;
    'two': Result += 2;
    'three': Result += 3;
    'four': Result += 4;
    'five': Result += 5;
    'six': Result += 6;
    'seven': Result += 7;
    'eight': Result += 8;
    'nine': Result += 9;
  end;

end;


procedure TWrathRunecrafter.CheckPouch();
begin
  if Inventory.ClickItem(Self.Pouch.Item, 'Check') then
    begin
      Chatbuttons.open(ERSChatButton.GAME_CHAT);
      Chat.SetScrollPosition(100);
      Wait(1000, 1200);
      Self.PouchCount := ParsePouchInt(Chat.GetMessage(7).Explode(' ')[2]);
      if Self.PouchCount = 40 then
        Self.PouchFull := true;
    end;
end;

procedure TWrathRunecrafter.CraftRunes();
begin
  try
    if RSObjects.RCAltar.WalkClick() then
    begin
      if Self.PouchCount > 0 then
      begin
        Inventory.Open();
        Inventory.MouseSlot(self.PouchSlot);
      end;
      Minimap.WaitPlayerMoving();
      if XPbar.WaitXP(1200) then
      begin
        Self.InventoryHasEss := False;
        Self.CraftRunesClicks := 0;
      end
      else
      begin
        Self.CraftRunesClicks += 1;
        if Self.CraftRunesClicks >= 3 then
        begin
          Self.CheckPouch();
          Self.CraftRunesClicks := 0;
        end;
      end;
    end;
  except
    Exit();
  end;
end;


procedure TWrathRunecrafter.Init(maxActions: UInt32; maxTime: UInt64); override;
begin
  inherited;

  Self.MythGuildBox := Box(5161, 5025, 5274, 5100);
  Self.MythGuildBasementBox := Box(9200, 5500, 9500, 5760);
  Self.MythGuildIslandBox := Box(5150, 5125, 5206, 5184);
  Self.WrathAltarBox := Box(7850, 156, 7912, 230);
  Self.CastleWarsBox := Box(5131, 4053, 5184, 4128);
  Self.EdgevilleBox := Box(7725, 2440, 7794, 2508);
  Self.MythGuildLadderBox := Box(9420, 5510, 9460, 5596);
  Self.FullMythGuildBox := Box(5101, 4930, 5300, 5200);
  Self.NardahBox := Box(8990, 4681, 9200, 4922);
  Self.CraftingGuildBox := Box(7095,3271,7170, 3352);

  Self.PrayerPotion := TRSBankItem.Setup('Prayer Potion(2)', 1);
  Self.StaminaPotion := TRSBankItem.Setup('Stamina Potion(1)', 1);
  Self.Essence := TRSBankItem.Setup('Pure essence', Bank.QUANTITY_ALL);
  Self.Pouch := TRSBankItem.Setup('Colossal Pouch', 1);
  Self.DegradedPouch := 26786;
  Self.Ring := TRSBankItem.Setup('Ring of Dueling(8)', 1);

  Self.RingPrice := ItemData.GetAverage(Self.Ring.Item);
  Self.EssPrice := ItemData.GetAverage(Self.Essence.Item);
  Self.WrathPrice := ItemData.GetAverage('Wrath rune');
  Self.StamPrice := ItemData.GetAverage('Stamina potion(1)');
  Self.PrayerPrice := ItemData.GetAverage('Prayer potion(1)');
  Self.NpcContactPrice := ItemData.GetAverage('Astral rune') +
                          ItemData.GetAverage('Cosmic rune') +
                          ItemData.GetAverage('Air rune') * 2;

  Self.KeepItemArray := [Self.Essence.Item, 'Divine rune pouch', 'Rune pouch', 'Wrath rune',
                         Self.Pouch.Item, Self.Ring.Item, 'Prayer potion(1)', 'Prayer potion(2)',
                         Self.StaminaPotion.Item, 'Mythical cape', 'Crafting cape(t)', 'Crafting cape',
                         'Desert amulet 4', 'Amulet of eternal glory', 'Amulet of glory(1)'];

  if SCRIPTSPEED > 100 then
    Mouse.Speed += (SCRIPTSPEED - 100);
  if SCRIPTSPEED = 110 then
    Mouse.Speed := 25;

  if Antiban.BioDice() then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN)
  else
    Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_RIGHT_CLICK);

  Self.RSW.Setup([RSRegions.CORSAIR_COVE_DUNGEON, Self.WrathAltarBox.Expand(70),
                  Self.CastleWarsBox.Expand(70), Self.EdgevilleBox.Expand(70),
                  Self.CraftingGuildBox.Expand(70), Self.FullMythGuildBox.Expand(70),
                  Self.NardahBox.Expand(70)], 8);  //5

  Self.RSW.AdaptiveWalk := ADAPTIVEWALK;

  if Options.GetZoomLevel > 15 then
    Options.SetZoomLevel(Random(3, 15));

  Combat.SetAutoRetaliate(False);
  Self.MaxHealth := Round(Minimap.GetHPLevel() / (Minimap.GetHPPercent() * 0.01)); //'dont have to open stats!

  Self.Transport.Init(EFairyTeleportItem.DRAMEN, 'ardougne cloak 2');

  if Equipment.Open() then
  begin
    if Equipment.ContainsItem('Mythical cape') then
      Self.Cape := 'Mythical cape'
    else if Equipment.ContainsItem('Crafting cape') then
      Self.Cape := 'Crafting cape'
    else if Equipment.ContainsItem('Crafting cape(t)') then
      Self.Cape := 'Crafting cape(t)'
    else if Equipment.ContainsItem('Runecraft cape') then
      Self.Cape := 'Runecraft cape'
    else if Equipment.ContainsItem('Runecraft cape(t)') then
      Self.Cape := 'Runecraft cape(t)'
    else if Equipment.ContainsItem('max cape') then
      Self.Cape := 'max cape';

    if Equipment.ContainsItem('Desert amulet 4') then
      Self.Amulet := 'Desert amulet 4'
    else if Equipment.ContainsItem('Amulet of eternal glory') then
      Self.Amulet := 'Amulet of eternal glory'
    else if Equipment.ContainsItem('Amulet of glory') then
      Self.Amulet := 'Amulet of glory';
  end;

  if Inventory.Open() then
  begin
    if not Inventory.FindItem(Self.Pouch.Item, Self.PouchSlot) then
      TerminateScript('Could not find colossal pouch');

    Self.CheckPouch();

    if Inventory.ContainsItem(Self.Essence.Item) then
      Self.InventoryHasEss := True;
  end;

  Self.TimeRunning.Reset();
end;

function TWrathRunecrafter.GetState(): EWrathCrafterState;
begin
  Self.Position := Self.RSW.GetMyPos();

  if MainScreen.HasInterface() then
  begin
    if not Bank.IsOpen() then
      Exit(EWrathCrafterState.CLOSE_INTERFACE);

    //refill pray, run energy and jewlery
    if Inventory.ContainsConsumable(ERSConsumable.FOOD) then
      Exit(EWrathCrafterState.EAT_FOOD);
    if not Self.DepositedRunes and Inventory.ContainsItem('Wrath rune') then
      Exit(EWrathCrafterState.DEPOSIT_RUNES);
    //if Inventory.ContainsRandomItems(Self.KeepItemArray) then //this is hurting more than helping
      //Exit(EWrathCrafterState.DEPOSIT_RANDOM);
    if Inventory.ContainsItem('Ring of Dueling(1)') then
      Exit(EWrathCrafterState.EQUIP_RING);
    if Inventory.ContainsItem('Amulet of glory(1)') then
      Exit(EWrathCrafterState.EQUIP_GLORY);
    if Inventory.ContainsItem('Prayer potion(1..2)') then
      Exit(EWrathCrafterState.DRINK_PRAYER);
    if Inventory.ContainsItem(Self.StaminaPotion.Item) then
      Exit(EWrathCrafterState.DRINK_STAMINA);
    if PRAY and Self.LowPrayer() then
      Exit(EWrathCrafterState.WITHDRAW_PRAYER);
    if Self.LowEnergy() then
      Exit(EWrathCrafterState.WITHDRAW_STAMINA);
    if Self.LowHealth() then
      Exit(EWrathCrafterState.WITHDRAW_FOOD);
    if Self.WithdrawRing then
      Exit(EWrathCrafterState.WITHDRAW_RING);
    if Self.WithdrawGlory then
      Exit(EWrathCrafterState.WITHDRAW_GLORY);
    //fill rune pouch
    if not Self.PouchFull and Inventory.IsFull() then
      Exit(EWrathCrafterState.FILL_POUCH);
    if Self.PouchFull and Inventory.IsFull() then
      Exit(EWrathCrafterState.CLOSE_INTERFACE);

    Exit(EWrathCrafterState.WITHDRAW_ESS);
  end;

  if Self.InBox(Self.NardahBox) and (Self.NeedsStatue or Self.ShouldTeleportNardah()) then
    Exit(EWrathCrafterState.CLICK_STATUE);
  //At Bank
  if Self.NearBank() then
  begin
    //dark mage
    if Chat.GetChatTitle() = 'Dark Mage' then
      Exit(EWrathCrafterState.TALK_MAGE);
    if Self.PouchDegraded and Bank.IsOpen() then
      Exit(EWrathCrafterState.CLOSE_INTERFACE);
    if Self.PouchDegraded then
      Exit(EWrathCrafterState.CALL_MAGE);

    if Self.PouchFull and Self.InventoryHasEss then
      Exit(EWrathCrafterState.TELEPORT_GUILD);

    Exit(EWrathCrafterState.OPEN_BANK);
  end;

  //Travel to Altar
  if Self.InBox(Self.MythGuildBox) then
    Exit(EWrathCrafterState.ENTER_STATUE);
  if Self.InBox(Self.MythGuildBasementBox) then
  begin
    if ADAPTIVEWALK and Self.InBox(Self.MythGuildLadderBox) then
      Exit(EWrathCrafterState.NAVIGATE_CORNER);
    Exit(EWrathCrafterState.ENTER_CAVE);
  end;
  if Self.InBox(Self.MythGuildIslandBox) then
    Exit(EWrathCrafterState.ENTER_RUINS);
  //At Altar
  if Self.InBox(Self.WrathAltarBox) then
  begin
    if Self.InventoryHasEss then
      Exit(EWrathCrafterState.CRAFT_RUNES);
    if Self.PouchCount > 0 then
      Exit(EWrathCrafterState.EMPTY_POUCH);
  end;

  if DESERTAMULET and Self.ShouldTeleportNardah() then
    Exit(EWrathCrafterState.TELEPORT_NARDAH);

  Exit(EWrathCrafterState.TELEPORT_BANK);
end;

procedure TWrathRunecrafter.SlowDown();
var
  reverseSpeed, waitTime, maxWaitTime: Int32;
begin
  if SCRIPTSPEED >= 100 then
    Exit();
  reverseSpeed := 100 - SCRIPTSPEED;
  maxWaitTime := reverseSpeed * 10;
  waitTime := Random(0, maxWaitTime);
  Write('Slowing Down for ');
  Write(waitTime);
  Writeln(' ms');
  Wait(waitTime);
end;


procedure TWrathRunecrafter.Run(maxActions: UInt32; maxTime: UInt64);
begin
  Self.Init(maxActions, maxTime);

  repeat
    Self.State := Self.GetState();
    Self.SetAction(ToStr(Self.State));

    case Self.State of
      EWrathCrafterState.ENTER_STATUE: Self.EnterStatue();
      EWrathCrafterState.ENTER_CAVE: Self.EnterCave();
      EWrathCrafterState.ENTER_RUINS: Self.EnterRuins();
      EWrathCrafterState.CRAFT_RUNES: Self.CraftRunes();
      EWrathCrafterState.EMPTY_POUCH: Self.EmptyPouch();
      EWrathCrafterState.TELEPORT_BANK: Self.TeleportBank();
      EWrathCrafterState.OPEN_BANK: Self.OpenBank();
      EWrathCrafterState.DRINK_PRAYER: Self.DrinkPrayerPotion();
      EWrathCrafterState.WITHDRAW_PRAYER: Self.Withdraw(Self.PrayerPotion);
      EWrathCrafterState.DRINK_STAMINA: Self.DrinkPotion(Self.StaminaPotion.Item);
      EWrathCrafterState.WITHDRAW_STAMINA: Self.Withdraw(Self.StaminaPotion);
      EWrathCrafterState.CLOSE_INTERFACE: Mainscreen.CloseInterface();
      EWrathCrafterState.WITHDRAW_ESS: Self.WithdrawEss();
      EWrathCrafterState.FILL_POUCH: Self.FillPouch();
      EWrathCrafterState.EQUIP_RING: Self.EquipRing();
      EWrathCrafterState.UNEQUIP_GLORY: Self.DoUnequipGlory();
      EWrathCrafterState.EQUIP_GLORY: Self.EquipGlory();
      EWrathCrafterState.WITHDRAW_RING: Self.BankWithdrawRing();
      EWrathCrafterState.WITHDRAW_GLORY: Self.BankWithdrawGlory();
      EWrathCrafterState.TELEPORT_GUILD: Self.TeleportGuild();
      EWrathCrafterState.TALK_MAGE: Self.TalkMage();
      EWrathCrafterState.CALL_MAGE: Self.CallMage();
      EWrathCrafterState.CLICK_STATUE: Self.ClickStatue();
      EWrathCrafterState.TELEPORT_NARDAH: Self.TeleportNardah();
      EWrathCrafterState.WITHDRAW_FOOD: Self.WithdrawFood();
      EWrathCrafterState.EAT_FOOD: Self.EatFood();
      EWrathCrafterState.DEPOSIT_RUNES: Self.DepositRunes();
      EWrathCrafterState.NAVIGATE_CORNER: Self.NavigateCorner();
      EWrathCrafterState.DEPOSIT_RANDOM: Bank.DepositRandomItems(Self.KeepItemArray);
    end;

    Self.SlowDown();
    Self.Position := RSW.GetMyPos();

    if Self.InBox(Self.MythGuildBasementBox) then
      Continue;
    Self.DoAntiban();
  until Self.ShouldStop();
end;

var
  WrathRunecrafter: TWrathRunecrafter;

{$IFDEF SCRIPT_GUI}
type
  TWrathRunecrafterConfig = record(TScriptForm)
    Selector, BankTeleportSelector: TLabeledCombobox;
    NardahCheckBox, PrayCheckBox, AnimeCheckBox: TLabeledCheckBox;
    SpeedBar: TTrackBar;
    SpeedBarLabel, SpeedBarLabel2: TLabel;
  end;

procedure TWrathRunecrafterConfig.StartScript(sender: TObject); override;
begin
  TELEPORTITEM := TeleportItemType(Self.BankTeleportSelector.GetItemIndex());

  DESERTAMULET := Self.NardahCheckBox.IsChecked();
  PRAY := Self.PrayCheckBox.IsChecked();

  SCRIPTSPEED := Self.SpeedBar.getPosition();
  inherited;
end;

procedure TWrathRunecrafterConfig.Run(); override;
var
  tab: TTabSheet;
begin
  Self.Setup("Wrath Runecrafter");
  Self.Start.SetOnClick(@Self.StartScript);

  Self.AddTab('Script Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  Self.CreateAccountManager(tab);
  Self.CreateVersionPanel(tab);
  Self.CreateAntibanManager();
  Self.CreateWaspLibSettings();
  Self.CreateAPISettings();

  with Self.BankTeleportSelector do
  begin
    Create(tab);
    SetCaption('Bank Teleport:');
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(135));
    SetStyle(csDropDownList);
    AddItemArray(['Ring of Dueling', 'DONT USE', 'Amulet of Eternal Glory',
                 'Crafting Cape', 'Max Cape']);
    SetItemIndex(Ord(TELEPORTITEM));
  end;

  with Self.NardahCheckBox do
  begin
    Create(tab);
    SetCaption("Use Desert Amulet 4");
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(Self.BankTeleportSelector.GetTop() + TControl.AdjustToDPI(50));
    SetChecked(DESERTAMULET);
  end;

  with Self.PrayCheckBox do
  begin
    Create(tab);
    SetCaption("Use Protect From Melee (Set this as quick pray)");
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(Self.NardahCheckBox.GetTop() + TControl.AdjustToDPI(20));
    SetChecked(PRAY);
  end;

  with Self.SpeedBarLabel do
  begin
    Create(tab);
    SetTop(Self.PrayCheckBox.GetTop() + TControl.AdjustToDPI(30));
    SetLeft(TControl.AdjustToDPI(125));
    SetCaption('Script Speed:');
  end;

  with Self.SpeedBar do
  begin
    Create(tab);
    SetMin(0);
    SetMax(110);
    SetPosition(SCRIPTSPEED);
    SetWidth(TControl.AdjustToDPI(250));
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(Self.SpeedBarLabel.GetTop() + TControl.AdjustToDPI(15));
    SetTooltip('Script Speed');
  end;

  with Self.SpeedBarLabel2 do
  begin
    Create(tab);
    SetTop(Self.SpeedBar.GetTop() + TControl.AdjustToDPI(20));
    SetLeft(TControl.AdjustToDPI(25));
    SetCaption('Slow' + ' ' * 26 +'Medium' + ' ' * 16 +'Fast' + ' ' * 4 + 'Turbo');
  end;

  inherited;
end;

var
  WrathRunecrafterConfig: TWrathRunecrafterConfig;
{$ENDIF}

begin
  {$IFDEF SCRIPT_GUI}
  WrathRunecrafterConfig.Run();
  {$ENDIF}
  WrathRunecrafter.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
