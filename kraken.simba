{$UNDEF SCRIPT_ID}{$DEFINE SCRIPT_ID := 'a398a083-63fd-4f13-936b-3963354fb4c1'}
{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '9'}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
  StatsPayload.SetUsername('');
end;

type
  EState = (
    WAIT_STATE,

    //Outside
    ENTER_CREVICE,
    HANDLE_CHAT,

    //Inside
    WALK_BRIDGE,
    CHECK_LOOT,
    WAKE_KRAKEN,
    ATTACK_KRAKEN,
    BOOST,
    EAT_FOOD,
    DRINK_PRAYER,
    ENABLE_QPRAY,
    ALCH_DROP,
    EQUIP_BRACELET,
    END_SCRIPT
  );

  TScript = record(TBaseScript)
    State: EState;

    RSW: TRSWalker;
    Bridge: TPoint;
    BossRoomTPA: TPointArray;

    KrakenFinder: TRSObjectFinder;
    SleepyKraken: TPointArray;

    AnotherPlayer: Boolean;
    KrakenTPA: TPointArray;
    IsAttacking: Boolean;
    CheckedLoot: Boolean;
    UseImbuedHeart: Boolean;
    ImbuedHeart: TCountDown;
  end;


procedure TAntiban.SetupBreaks(); override;
begin
  if Self.Breaks <> [] then
    Exit;

  Self.AddBreak(30 * ONE_MINUTE, 2 * ONE_MINUTE, 0.33, 0.01);
  Self.AddBreak(45 * ONE_MINUTE, 4 * ONE_MINUTE, 0.33, 0.15);
end;

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.TOTAL];
  Self.MinZoom := 0;
  Self.MaxZoom := 40;

  inherited;
end;

procedure TScript.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  inherited;

  RSW.Setup([RSRegions.KRAKEN_COVE]);
  Bridge := [10391, 1145];
  BossRoomTPA := [
    [10369, 1085], [10420, 1086], [10440, 1107],
    [10440, 1149], [10415, 1155], [10411, 1187],
    [10373, 1187], [10367, 1156], [10345, 1148],
    [10345, 1105]
  ];

  FoodHandler.MinInvPoints := 10;
  FoodHandler.MinInvPoints := 90;

  KrakenFinder.ClusterDistance := 3;
  KrakenFinder.Erode := 2;
  KrakenFinder.Grow := 4;
  KrakenFinder.Colors += CTS2(14407349, 13, 0.13, 1.43);
  KrakenFinder.MinShortSide := 70;
  
  UseImbuedHeart := True;
  ImbuedHeart.Setup(7 * ONE_MINUTE);

  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;

  Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_LEFT_CLICK);
  Combat.SetAutoRetaliate(False);
  CombatHandler.Setup(4000);
  CombatHandler.ManageGear := True;
  CombatHandler._SetupGear;

  CombatHandler.LootHandler.Setup(RSMonsters.Kraken, 5000);


  if not Equipment.ContainsItem('Sanguinesti staff') then
  begin
    CombatHandler.LootHandler.Loot.UpText += 'Shark';
    CombatHandler.LootHandler.Drops += ['Shark', '', False, False, 5];
  end;
end;


function TScript.InsideBossRoom(): Boolean;
begin
  Result := MainScreen.InMultiCombat;
end;

function TScript.EnterCrevice(): Boolean;
begin
  if RSObjects.KrakenEntrance.WalkSelectOption(['Private']) then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil('Pay' in Chat.GetChatTitle, 100, 5000);
  end;
end;

function TScript.HandlePayment(): Boolean;
begin
  Chat.ClickOption('Yes', BioHash);
  Result := WaitUntil(Self.InsideBossRoom, 100, 8000);
end;


function TScript.FindSleepyKraken(): Boolean;
var
  ATPA: T2DPointArray;
begin
  ATPA := MainScreen.FindObject(Self.KrakenFinder);
  Result := ATPA <> [];
  if Result then
    Self.SleepyKraken := ATPA[0];
end;

function TScript.FindRagingKraken(): Boolean;
var
  MMDots: TPointArray;
  KrakenDot: TPoint;
begin
  MMDots := Minimap.GetDots(ERSMinimapDot.NPC);
  Result := (Length(MMDots) >= 5) and not Self.FindSleepyKraken();

  if not Result then
    Exit;

  Self.CheckedLoot := False;

  MMDots.Sort(MMDots.Mean());
  KrakenDot := MMDots[0];

  Self.KrakenTPA := Minimap.GetCuboidMS(KrakenDot, [3, 3, 8], [-3, -3]);
  Self.KrakenTPA := KrakenTPA.Connect();
  Self.KrakenTPA.Fill();
end;


function TScript.FinishedSlayerTask(): Boolean;
begin
  Result := ('Lieve' in Chat.GetChat) or ('Lieve' in Chat.GetMessage(7));
  if Result then
    TerminateScript('FINISHED SLAYER TASK');
end;


function TScript.WakeKraken(): Boolean;
begin
  if not Inventory.SetSelectedItem('Fishing explosive') then
    Exit;
  Mouse.Move(Self.SleepyKraken);
  if MainScreen.IsUpText('Whirl') then
  begin
    Mouse.Click(MOUSE_LEFT);
    if MainScreen.DidRedClick then
      Result := IsAttacking := WaitUntil(Self.FindRagingKraken() or Self.FinishedSlayerTask(), 100, 7000);
  end;

  if Result then
    WL.Activity.Restart();
end;

function TScript.AttackKraken(): Boolean;
begin
  Mouse.Move(KrakenTPA.Mean());
  if MainScreen.IsUpText('Attack K') then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := IsAttacking := MainScreen.DidRedClick();
  end;
end;



function TScript.BoostMagic(): Boolean;
var
  Slot: Int32;
begin
  Result := UseImbuedHeart := Inventory.FindItem('Imbued heart', Slot);

  if not Result then
    Exit;

  Inventory.ClickSlot(Slot);
  ImbuedHeart.Restart(Random(3000, 35000));
  IsAttacking := False
end;


function TRSMainScreen.GetPlayerFloorBox(): TBox;
var
  A: Double := Minimap.GetCompassAngle(False);
  Center: TPoint := Minimap.Center();
  TPA: TPointArray;
begin
  TPA := [Minimap.VecToMS(Vec3(Center.X - 1, Center.Y, 3), A),
          Minimap.VecToMS(Vec3(Center.X + 1, Center.Y, -3), A)];

  Result := TPA.Bounds();
end;

function TScript.CheckLoot(): Boolean;
var
  B: TBox := MainScreen.GetPlayerFloorBox();
begin
  while Inventory.IsFull() and Inventory.ContainsConsumable(FOOD_CONSUMABLE) do
    Inventory.Consume(FOOD_CONSUMABLE);

  Result := CheckedLoot := True;

  while CombatHandler.LootHandler.CheckLoot(B) and Inventory.HasSpace(1) do
    Wait(400, 600);
end;


function TScript.GetState(): EState;
begin
  if WL.Activity.IsFinished() and not MainScreen.InCombat() then
    Exit(END_SCRIPT);

  if not Self.InsideBossRoom() then
  begin
    if 'Pay' in Chat.GetChatTitle ()then
      Exit(HANDLE_CHAT);
    Exit(ENTER_CREVICE);
  end;

  if (Minimap.GetHPLevel() <= 40) then
  begin
    if Inventory.ContainsConsumable(FOOD_CONSUMABLE) then
      Exit(EAT_FOOD)
    else if Self.FindRagingKraken() then
      Exit(ATTACK_KRAKEN)
    else if (Minimap.GetHPLevel() <= 25) then
      TerminateScript('OUT OF FOOD AND HEALTH');
  end;

  if (Minimap.GetPrayerLevel() <= 30) and Inventory.ContainsConsumable(PRAYER_CONSUMABLE) then
    Exit(DRINK_PRAYER);

  if CombatHandler.NeedBracelet() then
    Exit(EQUIP_BRACELET);

  if Self.UseImbuedHeart and ImbuedHeart.IsFinished() then
    Exit(BOOST);

  if not Minimap.IsPrayerEnabled() and (Minimap.GetPrayerLevel() > 0) then
    Exit(ENABLE_QPRAY);

  if not RSW.AtTile(Self.Bridge, 5) then
    Exit(WALK_BRIDGE);

  if Self.FindRagingKraken() then
  begin
    if Self.IsAttacking then
      Exit(WAIT_STATE);
    Exit(ATTACK_KRAKEN);
  end;

  if not Self.CheckedLoot then
    Exit(CHECK_LOOT);

  if Inventory.ContainsAny(RSAction.AlchItemArray) then
    Exit(ALCH_DROP);

  if Self.FindSleepyKraken() then
    Exit(WAKE_KRAKEN);
end;

procedure TScript.Run(MaxActions: Int32; MaxTime: Int64);
begin
  Self.Init(MaxActions, MaxTime);

  repeat
    State := Self.GetState();
    Self.SetAction(ToStr(State));

    case State of
      //Outside
      ENTER_CREVICE: Self.EnterCrevice();
      HANDLE_CHAT: Self.HandlePayment();

      //Inside
      WALK_BRIDGE: RSW.WebWalk(Bridge, 5, 0.2);
      WAIT_STATE: WaitUntil(not Self.FindRagingKraken, 100, 3000);
      CHECK_LOOT: Self.CheckLoot();
      WAKE_KRAKEN: Self.WakeKraken();
      ATTACK_KRAKEN: IsAttacking := Self.AttackKraken();
      BOOST: Self.BoostMagic();
      EAT_FOOD: Inventory.Consume(FOOD_CONSUMABLE);
      DRINK_PRAYER: Inventory.Consume(PRAYER_CONSUMABLE);
      ENABLE_QPRAY: Minimap.EnablePrayer();
      ALCH_DROP: if RSAction.AlchItems(RSAction.AlchItemArray) then Wait(600, 800);
      EQUIP_BRACELET: CombatHandler.EquipBracelet();
      END_SCRIPT: Break;
    end;

    Self.DoAntiban(True, False);
  until Self.ShouldStop();
end;


var
  Script: TScript;

function TRSInventory.Consume(ConsumableType: ERSConsumable; out Slots: TIntegerArray): Boolean; override;
begin
  Result := inherited(ConsumableType);

  if Result then
    Script.IsAttacking := False;
end;

{$IFDEF SCRIPT_GUI}
type
  TConfig = record(TScriptForm)
    InfoText: TLabel;
  end;

procedure TConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);
end;

procedure TConfig.Setup(); override;
begin
  inherited;

  UpdateFormSize(Self.Form, Self.Form.GetWidth() + 30, Self.Form.GetHeight() + 40);

  with Self.InfoText do
  begin
    Init(Self.SSPanel.Panel);
    setParent(Self.SSPanel.Panel);
    SetCaption(
      'Keep in mind this script doesn''t bank so Sang Staff is highly recommended.'
      + LineEnding +
      'If you have issues staying alive consider using magic and defense boosting prayers.'
      + LineEnding +
      'Overhead prayers have no effect on kraken.'
      + LineEnding + LineEnding +
      'Also keep in mind this won''t stop when you have your inventory full of loot.'
      + LineEnding +
      'I recommend you check it every 40 mins or so to see if it needs banking.'
    );
    SetLeft(5);
    SetTop(35);
    SetWidth(200);
  end;

  Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
end;

procedure TConfig.Run(); override;
begin
  Self.Setup();
  inherited;
end;

var
  Config: TConfig;
{$ENDIF}

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@Config.Run);
  {$ENDIF}
  Script.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
