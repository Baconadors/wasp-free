{$IFNDEF SCRIPT_CHAIN}
  {$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
  {$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
  StatsPayload.Username := '';
end;
{$ENDIF}

type
  ERSGlassItem = (BEER, LANTERN, LAMP, VIAL,
                  FISHBOWL, ORB, LENS, BULB, BEST);

var
  CurrentGlass: ERSGlassItem = ERSGlassItem.BEST;

type
  EBlowerState = (
    HOVER_BANK,
    OPEN_BANK,
    WITHDRAW_TOOL,
    WITHDRAW_MATERIAL,
    DEPOSIT_PRODUCT,
    DEPOSIT_RANDOM_ITEM,

    OPEN_COLLECT,
    HANDLE_COLLECT,
    CLOSE_INTERFACE,

    DO_GLASS,
    HANDLE_MAKE,
    WAIT_GLASS,

    LEVEL_UP,
    CLOSE_CONTEXT,

    END_SCRIPT
  );

  TBlower = record(TBaseBankScript)
    State: EBlowerState;

    Tool: TRSBankWithdrawItem;
    Material: TRSBankWithdrawItem;
    Product: TRSBankDepositItem;
    Blowing: Boolean;
    CurrentLevel: Int32;
    UseBestItem: Boolean;
    ItemChanged: Boolean;
  end;


procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.CRAFTING, ERSSkill.TOTAL];
  Antiban.MinZoom := 15;
  Antiban.MaxZoom := 85;
end;

procedure TBlower.SetupProduct;
var
  CurrentLevelItem: ERSGlassItem;
begin
  case CurrentLevel of
    1..3:   CurrentLevelItem := ERSGlassItem.BEER;
    4..11:  CurrentLevelItem := ERSGlassItem.LANTERN;
    12..32: CurrentLevelItem := ERSGlassItem.LAMP;
    33..41: CurrentLevelItem := ERSGlassItem.VIAL;
    42..45: CurrentLevelItem := ERSGlassItem.FISHBOWL;
    46..48: CurrentLevelItem := ERSGlassItem.ORB;
    49..86: CurrentLevelItem := ERSGlassItem.LENS;
    else    CurrentLevelItem := ERSGlassItem.BULB;
  end;

  if CurrentLevelItem <> CurrentGlass then
  begin
    CurrentGlass := CurrentLevelItem;
    ItemChanged := True;
  end;
end;

procedure TBlower.SetupItems;
var
  ProductCost: Int32;
  X_Number: Int32;
begin
  if not ItemChanged then Exit;

  Tool := ['Glassblowing pipe', 1, False];
  if SRL.Dice(70) then X_Number := BANK_WITHDRAW_ALL
  else X_Number := Random(27, 9999);
  Material := ['Molten glass', X_Number, False];

  case CurrentGlass of
    ERSGlassItem.BEER:     Product := ['Beer glass', X_Number];
    ERSGlassItem.LANTERN:  Product := ['Empty candle lantern', X_Number];
    ERSGlassItem.LAMP:     Product := ['Empty oil lamp', X_Number];
    ERSGlassItem.VIAL:     Product := ['Vial', X_Number];
    ERSGlassItem.FISHBOWL: Product := ['Empty fishbowl', X_Number];
    ERSGlassItem.ORB:      Product := ['Unpowered orb', X_Number];
    ERSGlassItem.LENS:     Product := ['Lantern lens', X_Number];
    ERSGlassItem.BULB:     Product := ['Empty light orb', X_Number];
  end;

  ExtraInfo := 'Blowing item: ' + Product.Item + '.';
  ProductCost := ItemData.GetAverage(Material.Item);

  ActionProfit := (
    ItemData.GetAverage(Product.Item) -
    ProductCost
  );

  ItemChanged := False;
end;

procedure TBlower.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'Glassblower';

  inherited;
  Self.SetupWLBanks;

  if ScriptDebugEnabled then
    DebugObjectArray += @ScriptBank;

  UseBestItem := CurrentGlass = ERSGlassItem.Best;
  ItemChanged := True;

  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;

  CurrentLevel := Stats.GetCurrentLevel(ERSSkill.CRAFTING);
end;


function TBlower.HasRandomItem: Boolean;
var
  Slots: TIntegerArray;
  UsedSlots: TIntegerArray := Inventory.GetUsedSlots;
begin
  Inventory.FindItem(Tool.Item, Slots);
  Inventory.FindItem(Material.Item, Slots);

  Result := Length(Slots) <> Length(UsedSlots);
end;

function TBlower.CountItem: Int32;
begin
  if (Result := Inventory.CountItemStack(Product.Item)) = 0 then
    Result := Inventory.CountItem(Product.Item);
end;


function TBlower.Withdraw(Item: TRSBankWithdrawItem): Boolean;
var
  UseQuantityButton: Boolean := Item.Quantity <> 1;
  InvCount: Int32 := Inventory.Count;
begin
  if Result := Bank.WithdrawItem(BankTab, Item, UseQuantityButton) then
    WaitUntil(Inventory.Count > InvCount, 100, 3000);

  if BankEmpty := (not Result and not Bank.ContainsItem(BankTab, Item)) then
    if CollectEmpty and CollectTimer.IsFinished then
      CollectEmpty := False;
end;

function TBlower.DepositExtraItems: Boolean;
var
  Slots, DepositSlots: TIntegerArray;
  i: Int32;
begin
  if Tool.Quantity = 1 then
    Inventory.FindItem(Tool.Item, Slots);

  DepositSlots := Slots.Difference(Inventory.GetUsedSlots);

  repeat
    if Result := Bank.DepositSlot([DepositSlots[i], BANK_DEPOSIT_ALL], True) then
      WaitUntil(not Inventory.IsSlotUsed(DepositSlots[i]), 100, 2000);
    DepositSlots := Slots.Difference(Inventory.GetUsedSlots);
  until Result := (DepositSlots = []);
end;

function TBlower.Deposit: Boolean;
var
  ItemCount: Int32 := Self.CountItem;
begin
  if Result := Bank.DepositItem(BankTab, Product, True) then
    if WaitUntil(Self.CountItem = 0, 100, 3000) then
      TotalActions += ItemCount;
end;

function TBlower.HandleCollectBox: Boolean;
var
  Slots: TIntegerArray;
begin
  if CollectBox.FindItems([Tool.Item, Material.Item], Slots) then
  begin
    if Result := CollectEmpty := CollectBox.CollectToBank then
      WaitUntil(not CollectBox.FindItems([Tool.Item, Material.Item], Slots), 50, 2000);
    BankEmpty := not CollectEmpty;
  end
  else
    CollectEmpty := True;

  CollectTimer.Restart;
end;


function TBlower.DoGlass: Boolean;
begin
  if SRL.Dice(50) then
    Result := Inventory.Use(Tool.Item, Material.Item)
  else
    Result := Inventory.Use(Material.Item, Tool.Item);

  if Result then Make.IsOpen(2000);
end;


function TRSMake.SetQuantity(Amount: Int32): Boolean; override;
const
  ENABLED_COLOR = $FFFFFF;
var
  Button: TRSButton;
  Buttons: TRSButtonArray;
begin
  if Amount <> MAKE_QUANTITY_ALL then
    Exit(inherited);

  Buttons := GetQuantityButtons;

  if Buttons = [] then
    Exit;

  Button := Buttons[High(Buttons)];

  if SRL.CountColor(ENABLED_COLOR, Button.Bounds) > 0 then
    Exit(True)
  else
    Exit(Button.Click);
end;


function TBlower.HandleMake: Boolean;
var
  MakeStringArray: TStringArray;
  ItemIndex: Int32;
  i: Int32;
begin
  MakeStringArray := [
    'Beer glass', 'Candle lantern', 'Oil lamp', 'Vial', 'Fishbowl',
    'Unpowered staff orb', 'Lantern lens', 'Light orb'
  ];

  for i := Ord(Low(ERSGlassItem)) to Ord(High(ERSGlassItem)) do
    if CurrentGlass = ERSGlassItem(i) then
    begin
      ItemIndex := i;
      Break;
    end;

  Blowing := Result := Make.Select(ItemIndex, MAKE_QUANTITY_ALL, SRL.Dice(98.5));
  if Result then WaitUntil(not Make.IsOpen, 50, 2000);
end;


function TBlower.WaitBlowing: Boolean;
begin
  if Blowing then
    Result := Blowing := Inventory.ContainsItem(Material.Item) and XPBar.WaitXP(2000)
  else
    Result := Blowing := XPBar.WaitXP(2000);
end;


function TBlower.GetState: EBlowerState;
begin
  if WL.Activity.IsFinished then
    Exit(EBlowerState.END_SCRIPT);

  if XPBar.EarnedXP then
    Exit(EBlowerState.WAIT_GLASS);

  if Chat.LeveledUp then
  begin
    Blowing := False;
    Exit(EBlowerState.LEVEL_UP);
  end;

  if Make.IsOpen then
    Exit(EBlowerState.HANDLE_MAKE);

  if MainScreen.HasInterface then
  begin
    if Bank.IsOpen then
    begin
      if Inventory.ContainsItem(Product.Item) then
        Exit(EBlowerState.DEPOSIT_PRODUCT);

      if Self.HasRandomItem then
        Exit(EBlowerState.DEPOSIT_RANDOM_ITEM);

      if BankEmpty or Inventory.ContainsAll([Tool.Item, Material.Item]) then
        Exit(EBlowerState.CLOSE_INTERFACE);

      if not Inventory.ContainsItem(Tool.Item) then
        Exit(EBlowerState.WITHDRAW_TOOL);

      if not Inventory.ContainsItem(Material.Item) then
        Exit(EBlowerState.WITHDRAW_MATERIAL);
    end;

    if CollectBox.IsOpen then
    begin
      if CollectEmpty then
        Exit(EBlowerState.CLOSE_INTERFACE);

      Exit(EBlowerState.HANDLE_COLLECT);
    end;

    Exit(EBlowerState.CLOSE_INTERFACE);
  end;

  if Inventory.ContainsAll([Tool.Item, Material.Item]) then
  begin
    if Blowing then
      Exit(EBlowerState.WAIT_GLASS);

    Exit(EBlowerState.DO_GLASS);
  end;

  if BankEmpty and CollectEmpty then
    Exit(EBlowerState.END_SCRIPT);

  if BankEmpty then
    Exit(EBlowerState.OPEN_COLLECT);

  Exit(EBlowerState.OPEN_BANK);
end;

function TBlower.Terminate: Boolean; override;
begin
  if inherited then
    for 0 to 3 do
      if Result := Bank.WithdrawItem(BankTab, [Product.Item, BANK_WITHDRAW_ALL, True], True) then
        Break;
end;

procedure TBlower.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  while not Self.ShouldStop do
  begin
    if UseBestItem then
      Self.SetupProduct;

    Self.SetupItems;

    State := GetState;
    Action := ToStr(State);
    Self.ProcessWhileWaiting;

    case State of
      EBlowerState.OPEN_BANK: Bank.WalkOpen(ScriptBank);
      EBlowerState.WITHDRAW_TOOL: Self.Withdraw(Tool);
      EBlowerState.WITHDRAW_MATERIAL: Self.Withdraw(Material);
      EBlowerState.DEPOSIT_PRODUCT: Self.Deposit;
      EBlowerState.DEPOSIT_RANDOM_ITEM: Self.DepositExtraItems;

      EBlowerState.OPEN_COLLECT: CollectBox.WalkOpen(ScriptBank);
      EBlowerState.HANDLE_COLLECT: Self.HandleCollectBox;
      EBlowerState.CLOSE_INTERFACE: MainScreen.CloseInterface;

      EBlowerState.DO_GLASS: Self.DoGlass;
      EBlowerState.HANDLE_MAKE: Self.HandleMake;
      EBlowerState.WAIT_GLASS: Self.WaitBlowing;

      EBlowerState.LEVEL_UP: Chat.HandleLevelUp;
      EBlowerState.CLOSE_CONTEXT: ChooseOption.Close;

      EBlowerState.END_SCRIPT: Break;
    end;

    Self.DoAntiban;
  end;

  if not Self.Terminate then
    TerminateScript(Name + ' didn''t terminate properly. Stopping execution.');
end;

var
  Blower: TBlower;

function TRSChat.HandleLevelUp(Chance: Double = BioHash): Boolean; override;
begin
  Result := inherited(Chance);

  Blower.CurrentLevel += 1;
end;

type
  TBlowerConfig = record(TBankConfig)
    GlassSelector: TLabeledCombobox;
  end;

procedure TBlowerConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentGlass := ERSGlassItem(GlassSelector.Combobox.getItemIndex);
end;

procedure TBlowerConfig.Setup(Strs: TStringArray); override;
begin
  inherited;

  with GlassSelector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('Glass item:');
    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight + 55);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    AddItem('Beer glass');
    AddItem('Candle lantern');
    AddItem('Oil lamp');
    AddItem('Vial');
    AddItem('Fishbowl');
    AddItem('Unpowered orb');
    AddItem('Lantern lens');
    AddItem('Light orb');
    AddItem('Best available');
    Combobox.setItemIndex(Ord(CurrentGlass));
  end;

  StartButton.setOnClick(@Self.StartScript);
end;

procedure TBlowerConfig.Run; override;
begin
  Self.Setup(BankLocationStrings);

  inherited;
end;

var
  BlowerConfig: TBlowerConfig;

{$IFNDEF SCRIPT_CHAIN}
begin
  {$IFDEF SCRIPT_GUI}
  Sync(@BlowerConfig.Run);
  {$ENDIF}
  Blower.Run(MaxActions, MaxTime);
end.
{$ENDIF}
