{$DEFINE SCRIPT_ID := '207b1ab4-561d-4543-8467-705cdfce98ec'}
{$DEFINE SCRIPT_REVISION := '34'}
{$DEFINE SCRIPT_GUI}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
end;

type
  ERSBank = (
    POWER_WC, GE, VARROCK_E, VARROCK_W,
    EDGE, SEERS_VILLAGE, DRAYNOR_VILLAGE, WOODCUT_GUILD, PRIFDDINAS
  );

  ERSTree = (
    REGULAR_TREE, OAK_TREE, WILLOW_TREE,
    TEAK_TREE, MAPLE_TREE, MAHOGANY_TREE, YEW_TREE,
    BLISTERWOOD_TREE, MAGIC_TREE
  );

var
  CurrentTree: ERSTree := ERSTree.TEAK_TREE;
  BankLocation: ERSBank := ERSBank.PRIFDDINAS;
  UseSawmill: Boolean := True;
  PickNests: Boolean := True;

type
  EWoodcutterState = (
    OPEN_BANK,
    DEPOSIT_ITEMS,
    CLOSE_INTERFACE,

    WALK_SPOT,
    WAIT_STATE,

    EQUIP_GEAR,
    PICKUP_NEST,
    LEVEL_UP,
    USE_SPEC,
    CUT_TREE,

    OPEN_SAWMILL,
    HANDLE_MAKE,

    DROP_ITEMS,
    END_SCRIPT
  );

  TWoodcutter = record(TBaseBankScript)
    State: EWoodcutterState;

    RSTree: TRSObject;
    TreeTimerMultiplier: Int32;

    ToolType: TCTS2Color;
    ToolShift: Int32;

    Logs, Plank: TRSItem;
    LogPrice, PlankSawmillPrice, PlankPrice: Int32;
    SawmillString: String;
    GearOutfit, BankList, DropList: TRSItemArray;

    Woodcutting, UseBank: Boolean;
  end;

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.WOODCUTTING, ERSSkill.TOTAL];
  Self.MinZoom := 15;
  Self.MaxZoom := 60;

  inherited;
end;

procedure TWoodcutter.SetupTree();
begin
  if not Self.UseBank then
  begin
    RSObjects.Setup();
    RSObjects.RegularTree.Filter.Skip := False;
    RSObjects.OakTree.Filter.Skip := False;
    RSObjects.WillowTree.Filter.Skip := False;
    RSObjects.TeakTree.Filter.Skip := False;
    RSObjects.MapleTree.Filter.Skip := False;
    RSObjects.MahoganyTree.Filter.Skip := False;
    RSObjects.YewTree.Filter.Skip := False;
    RSObjects.BlisterwoodTree.Filter.Skip := False;
    RSObjects.MagicTree.Filter.Skip := False;

    RSObjects.RegularTree.Setup(['own Tree']);
    RSObjects.OakTree.Setup(['own Oak']);
    RSObjects.WillowTree.Setup(['own Wil']);
    RSObjects.TeakTree.Setup(['own Tea']);
    RSObjects.MapleTree.Setup(['own Map']);
    RSObjects.MahoganyTree.Setup(['own Maho']);
    RSObjects.YewTree.Setup(['own Yew']);
    RSObjects.BlisterwoodTree.Setup(['Chop Blister']);
    RSObjects.MagicTree.Setup(['own Magi']);
  end;

  Self.TreeTimerMultiplier := 1;

  case CurrentTree of
    ERSTree.REGULAR_TREE:
      begin
        Self.RSTree := RSObjects.RegularTree;
        Self.Logs := 'Logs';
        Self.Plank := 'Plank';
        Self.PlankSawmillPrice := 100;
        Self.SawmillString := 'Wood - 100gp';
      end;

    ERSTree.OAK_TREE:
      begin
        Self.RSTree := RSObjects.OakTree;
        Self.Logs := 'Oak logs';
        Self.Plank := 'Oak plank';
        Self.PlankSawmillPrice := 250;
        Self.SawmillString := 'Oak - 250gp';
      end;

    ERSTree.TEAK_TREE:
      begin
        Self.RSTree := RSObjects.TeakTree;
        Self.Logs := 'Teak logs';
        Self.Plank := 'Teak plank';
        Self.PlankSawmillPrice := 500;
        Self.SawmillString := 'Teak - 500gp';
      end;

    ERSTree.MAHOGANY_TREE:
      begin
        Self.RSTree := RSObjects.MahoganyTree;
        Self.Logs := 'Mahogany logs';
        Self.Plank := 'Mahogany plank';
        Self.PlankSawmillPrice := 1500;
        Self.SawmillString := 'Mahogany - 1,500gp';
      end;

    ERSTree.WILLOW_TREE:
      begin
        Self.RSTree := RSObjects.WillowTree;
        Self.Logs := 'Willow logs';
      end;

    ERSTree.MAPLE_TREE:
      begin
        Self.RSTree := RSObjects.MapleTree;
        Self.Logs := 'Maple logs';
      end;

    ERSTree.YEW_TREE:
      begin
        Self.RSTree := RSObjects.YewTree;
        Self.Logs := 'Yew logs';
      end;

    ERSTree.BLISTERWOOD_TREE:
      begin
        Self.RSTree := RSObjects.BlisterwoodTree;
        Self.Logs := 'Blisterwood logs';
      end;

    ERSTree.MAGIC_TREE:
      begin
        Self.RSTree := RSObjects.MagicTree;
        Self.Logs := 'Magic logs';
      end;
  end;

  Self.LogPrice := ItemData.GetAverage(Self.Logs);

  if Ord(CurrentTree) >= Ord(ERSTRee.MAPLE_TREE) then
    Self.TreeTimerMultiplier += 1;

  if Ord(CurrentTree) >= Ord(ERSTRee.YEW_TREE) then
    Self.TreeTimerMultiplier += 2;

  if Ord(CurrentTree) >= Ord(ERSTRee.MAGIC_TREE) then
    Self.TreeTimerMultiplier += 3;

  Self.DropList := [
    'Logs', 'Oak logs', 'Willow logs', 'Teak logs', 'Maple logs',
    'Mahogany logs', 'Yew logs', 'Blisterwood logs', 'Magic logs'
  ];

  Self.BankList := Self.DropList;

  if ToStr(Self.Plank) <> '' then
  begin
    Self.BankList += Self.Plank;
    Self.PlankPrice := ItemData.GetAverage(Self.Plank);
  end;

  Self.BankList += 'Bird nest';
  Self.BankList += 23866;
  Self.BankList += 23966;
  Self.BankList += 23967;
  Self.BankList += 23968;
  Self.BankList += 23969;
  Self.BankList += 23970;  //Crystal shards
end;

procedure TWoodcutter.SetupBank();
begin
  case BankLocation of
    WOODCUT_GUILD:
      begin
        Self.RSW.Setup([RSRegions.WOODCUTTING_GUILD]);
        Self.UseBank := True;
      end;

    GE, VARROCK_W:
      begin
        Self.RSW.Setup([RSRegions.VARROCK_WEST]);
        Self.UseBank := True;
        RSObjects.BankWood3.Coordinates.Remove([7981, 2651], True);
        RSObjects.BankWood3.Coordinates.Remove([7985, 2651], True);
      end;

    VARROCK_E:
      begin
        Self.RSW.Setup([RSRegions.VARROCK_EAST]);
        Self.UseBank := True;
      end;

    EDGE:
      begin
        Self.RSW.Setup([RSRegions.EDGEVILLE]);
        Self.UseBank := True;
      end;

    PRIFDDINAS:
      begin
        Self.RSW.Setup([RSRegions.PRIFDDINAS]);
        Self.UseBank := True;
      end;

    DRAYNOR_VILLAGE:
      begin
        Self.RSW.Setup([RSRegions.DRAYNOR_VILLAGE]);
        Self.UseBank := True;
      end;

    SEERS_VILLAGE:
      begin
        Self.RSW.Setup([RSRegions.SEERS_VILLAGE]);
        Self.UseBank := True;
      end;

    POWER_WC:
      begin
        Self.UseBank := False;
        RSGroundItems.Setup();
      end;
  end;
end;

procedure TWoodcutter.SetupTool();
begin
  if Equipment.Open() then
  begin
    ToolShift := 30;
    if Equipment.ContainsAny(['Crystal axe', 'Crystal axe (inactive)']) then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39); //need to add proper color later
    end
    else if Equipment.ContainsItem('Infernal axe') then
    begin
      ToolShift := 70;
      ToolType := CTS2(662647, 11, 0.17, 1.50); //need to add proper color later
    end
    else if Equipment.ContainsItem('3rd age axe') then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39);
    end
    if Equipment.ContainsItem('Dragon axe') then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39);
    end
    else if Equipment.ContainsItem('Gilded axe') then
      ToolType := CTS2(1019842, 14, 0.02, 0.63)
    else if Equipment.ContainsItem('Rune axe') then
      ToolType := CTS2(6050622, 12, 0.10, 0.11)
    else if Equipment.ContainsItem('Adamant axe') then
      ToolType := CTS2(3951419, 11, 0.13, 0.16)
    else if Equipment.ContainsItem('Mithril axe') then
      ToolType := CTS2(4534853, 17, 1.11, 0.34)
    else if Equipment.ContainsItem('Black axe') then
      ToolType := CTS2(1118485, 1, 0.01, 0.01)
    else if Equipment.ContainsItem('Steel axe') then
      ToolType := CTS2(6711151, 17, 0.11, 0.07)
    else if Equipment.ContainsItem('Iron axe') then
      ToolType := CTS2(4671309, 11, 0.28, 0.09)
    else if Equipment.ContainsItem('Bronze axe') then
      ToolType := CTS2(1979716, 9, 0.10, 0.24);
  end;

  if (Self.ToolType = []) and Inventory.Open() then
  begin
    ToolShift := 30;
    if Inventory.ContainsAny(['Crystal axe', 'Crystal axe (inactive)']) then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39); //need to add proper color later
    end
    else if Inventory.ContainsItem('Infernal axe') then
    begin
      ToolShift := 70;
      ToolType := CTS2(662647, 11, 0.17, 1.50); //need to add proper color later
    end
    else if Inventory.ContainsItem('3rd age axe') then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39);
    end
    else if Inventory.ContainsItem('Dragon axe') then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39);
    end
    else if Inventory.ContainsItem('Gilded axe') then
      ToolType := CTS2(1019842, 14, 0.02, 0.63)
    else if Inventory.ContainsItem('Rune axe') then
      ToolType := CTS2(6050622, 12, 0.10, 0.11)
    else if Inventory.ContainsItem('Adamant axe') then
      ToolType := CTS2(3951419, 11, 0.13, 0.16)
    else if Inventory.ContainsItem('Mithril axe') then
      ToolType := CTS2(4534853, 17, 1.11, 0.34)
    else if Inventory.ContainsItem('Black axe') then
      ToolType := CTS2(1118485, 1, 0.01, 0.01)
    else if Inventory.ContainsItem('Steel axe') then
      ToolType := CTS2(6711151, 17, 0.11, 0.07)
    else if Inventory.ContainsItem('Iron axe') then
      ToolType := CTS2(4671309, 11, 0.28, 0.09)
    else if Inventory.ContainsItem('Bronze axe') then
      ToolType := CTS2(1979716, 9, 0.10, 0.24);
  end;
end;


procedure TWoodcutter.Init(maxActions: Int32; maxTime: Int64); override;
begin
  inherited;

  Self.SetupBank();
  Self.SetupTree();

  GearOutfit := [
    'Lumberjack hat',
    'Lumberjack top',
    'Lumberjack legs',
    'Lumberjack boots',
    'Strung rabbit foot'
  ];

  if Antiban.BioDice() then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN)
  else
    Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_RIGHT_CLICK);

  Self.SetupTool();

  if WLSettings.RemoteInput.HUDDebug then
  begin
    DebugObjectArray += RSTree;
    DebugMMDotArray += RSNPCs.SawmillOperator;
  end;
end;


function TWoodcutter.CutTree(): Boolean;
begin
  if (Self.UseBank and RSTree.WalkClick()) or RSTree.Click() then
  begin
    Minimap.WaitMoving();
    Result := Self.Woodcutting := True;
  end;
end;


function TWoodcutter.EquipGear(): Boolean;
var
  item: TRSItem;
begin
  for item in Self.GearOutfit do
    if Inventory.ClickItem(item) then
      Wait(200, 300);

  Result := not Inventory.ContainsAny(Self.GearOutfit);
end;

function TWoodcutter.DropItems(): Boolean;
var
  count: Int32;
begin
  count := Inventory.Count();
  Result := Inventory.ShiftDrop(Self.DropList, Inventory.RandomPattern());

  count := count - Inventory.Count();
  Self.TotalActions += count;
end;


function TWoodcutter.HasEnoughMoney(): Boolean;
begin
  Result := Inventory.CountItemStack('Coins') >= Self.PlankSawmillPrice;
end;


function TWoodcutter.CheckNest(): Boolean;
begin
  Result := PickNests and RSGroundItems.BirdNest.IsVisible();
end;

function TWoodcutter.PickNest(): Boolean;
var
  count: Int32;
begin
  count := Inventory.Count();
  if RSGroundItems.BirdNest.Click(True, 0) then
  begin
    Self.Woodcutting := False;
    Minimap.WaitMoving();
    Result := WaitUntil(count < Inventory.Count(), 300, 8000);
  end;
end;


function TWoodcutter.OpenSawmill(): Boolean;
begin
  if BankLocation = ERSBank.PRIFDDINAS then
  begin
    if not Self.RSW.WebWalk([4103, 2075], 15, 0.2) then
      Exit;

    if not RSNPCs.SawmillOperator.SelectOption(['Buy', 'plank']) then
      Exit;
  end
  else if not RSNPCs.SawmillOperator.WalkSelectOption(['Buy', 'plank']) then
    Exit;

  Minimap.WaitMoving();
  Result := WaitUntil(Make.IsOpen(), 100, 8000);
end;

function TWoodcutter.MakePlanks(): Boolean;
begin
  if Make.Select(Self.SawmillString, Make.QUANTITY_ALL, SRL.Dice(95)) then
    Result := WaitUntil(Inventory.ContainsItem(Self.Plank), 200, 10000);

  if Result then
    Self.TotalProfit += Self.PlankSawmillPrice * Inventory.CountItem(Self.Plank);
end;

function TWoodcutter.Deposit(): Boolean;
var
  count: Int32;
begin
  if UseSawmill then
    count := Inventory.CountItem(Self.Plank)
  else
    count := Inventory.CountItem(Self.Logs);

  Result := Bank.DepositItems(Self.BankList, True);

  if Result then
  begin
    Self.TotalActions += count;
    if UseSawmill then
      Self.TotalProfit += count * Self.PlankPrice
    else
      Self.TotalProfit += count * Self.LogPrice;
  end
  else
    WriteLn 'Failed to deposit!';
end;


function TSRL.IsAnimating(Area:TBox; Shift, WaitTime:UInt32; Iter:UInt32=1): Boolean; override;
var
  i:Int32;
begin
  for i:=1 to Iter do
    if (Self.GetPixelShift(Area, WaitTime) > shift) or XPBar.EarnedXP then
      Exit(True);
end;

function TWoodcutter.IsCutting(): Boolean;
var
  b: TBox;
begin
  b := MainScreen.GetPlayerBox();
  Self.Woodcutting := SRL.IsAnimating(b, MainScreen.NormalizeDistance(600), 350, 10 * TreeTimerMultiplier);
  Result := Self.Woodcutting;
end;

function TWoodcutter.WaitCutting(): Boolean;
begin
  if Result := Self.IsCutting then WL.Activity.Restart();
end;

function TWoodcutter.GetState(): EWoodcutterState;
begin
  if XPBar.EarnedXP() then
    Exit(EWoodcutterState.WAIT_STATE);

  if WL.Activity.IsFinished() then
    Exit(EWoodcutterState.END_SCRIPT);

  if Chat.LeveledUp() then
  begin
    Self.Woodcutting := False;
    Exit(EWoodcutterState.LEVEL_UP);
  end;

  if UseSawmill and Make.IsOpen() then
    Exit(EWoodcutterState.HANDLE_MAKE);

  if MainScreen.HasInterface() then
  begin
    if Bank.IsOpen() and Inventory.ContainsAny(Self.BankList) then
      Exit(EWoodcutterState.DEPOSIT_ITEMS);
    Exit(EWoodcutterState.CLOSE_INTERFACE);
  end;

  if Inventory.ContainsAny(Self.GearOutfit) then
    Exit(EWoodcutterState.EQUIP_GEAR);

  if Inventory.IsFull() then
  begin
    Self.Woodcutting := False;

    if not UseBank then
      Exit(EWoodcutterState.DROP_ITEMS);

    if UseSawmill and not Inventory.ContainsItem(Self.Plank) and Self.HasEnoughMoney() then
      Exit(EWoodcutterState.OPEN_SAWMILL);

    Exit(EWoodcutterState.OPEN_BANK);
  end;

  if Self.Woodcutting then
    Exit(EWoodcutterState.WAIT_STATE);

  if UseBank and not RSW.AtTile(RSTree.Coordinates, 15) then
    Exit(EWoodcutterState.WALK_SPOT);

  if Self.CheckNest() then
    Exit(EWoodcutterState.PICKUP_NEST);

  if Minimap.IsSpecWeapon() and (Minimap.GetSpecLevel = 100) then
    Exit(EWoodcutterState.USE_SPEC);

  Exit(EWoodcutterState.CUT_TREE);
end;

procedure TWoodcutter.Run(maxActions: Int32; maxTime: Int64);
begin
  Self.Init(maxActions, maxTime);

  repeat
    State := Self.GetState();
    Self.SetAction(ToStr(Self.State));

    case Self.State of
      EWoodcutterState.OPEN_BANK: Bank.WalkOpen();
      EWoodcutterState.DEPOSIT_ITEMS: Self.Deposit();
      EWoodcutterState.CLOSE_INTERFACE: MainScreen.CloseInterface();
      EWoodcutterState.WALK_SPOT: RSW.WebWalk(RSTree.Coordinates, 10, 0.2);
      EWoodcutterState.WAIT_STATE: Self.WaitCutting();
      EWoodcutterState.LEVEL_UP: Chat.HandleLevelUp();
      EWoodcutterState.EQUIP_GEAR: Self.EquipGear();
      EWoodcutterState.USE_SPEC: Minimap.EnableSpec(100);
      EWoodcutterState.PICKUP_NEST: Self.PickNest();
      EWoodcutterState.CUT_TREE: Self.CutTree();
      EWoodcutterState.OPEN_SAWMILL: Self.OpenSawmill();
      EWoodcutterState.HANDLE_MAKE: Self.MakePlanks();
      EWoodcutterState.DROP_ITEMS: Self.DropItems();
      EWoodcutterState.END_SCRIPT: Break;
    end;

    Self.DoAntiban();
  until Self.ShouldStop();
end;

var
  Woodcutter: TWoodcutter;

{$IFDEF SCRIPT_GUI}
type
  TCutterConfig = record(TScriptForm)
    TreeSelector: TLabeledCombobox;
    BankSelector: TLabeledCombobox;
    SawmillState: TLabeledCheckbox;
    PickNestsState: TLabeledCheckbox;
  end;

procedure TCutterConfig.StartScript(sender: TObject); override;
begin
  CurrentTree := ERSTree(Self.TreeSelector.getItemIndex());

  case Self.BankSelector.GetText() of
    'Power WC (cut and drop)':              BankLocation := ERSBank.POWER_WC;
    'Grand Exchange':                       BankLocation := ERSBank.GE;
    'Varrock east (cuts close to sawmill)': BankLocation := ERSBank.VARROCK_E;
    'Varrock west':                         BankLocation := ERSBank.VARROCK_W;
    'Draynor':                              BankLocation := ERSBank.DRAYNOR_VILLAGE;
    'Seers'' village':                      BankLocation := ERSBank.SEERS_VILLAGE;
    'Edgeville':                            BankLocation := ERSBank.EDGE;
    'Woodcutting guild':                    BankLocation := ERSBank.WOODCUT_GUILD;
    'Prifddinas':                           BankLocation := ERSBank.PRIFDDINAS;
  end;

  UseSawmill := Self.SawmillState.IsChecked();
  PickNests := Self.PickNestsState.IsChecked();

  inherited;
end;


procedure TCutterConfig.BankSelectorOnChange(sender: TObject);
var
  combobox: TComboBox;
begin
  combobox := sender;
  Self.SawmillState.SetChecked(False);
  Self.SawmillState.setEnabled(False);

  case combobox.GetText() of
    'Varrock east (cuts close to sawmill)', 'Woodcutting guild', 'Prifddinas':
        case ERSTree(Self.TreeSelector.GetItemIndex()) of
          REGULAR_TREE, OAK_TREE, TEAK_TREE, MAHOGANY_TREE:
            Self.SawmillState.SetEnabled(True);
        end;
  end;
end;

procedure TCutterConfig.TreeSelectorOnChange(sender: TObject);
var
  combobox: TComboBox;
begin
  combobox := sender;
  Self.BankSelector.Clear();

  case ERSTree(combobox.getItemIndex()) of
    REGULAR_TREE:
      Self.BankSelector.AddItemArray(['Power WC (cut and drop)',
      'Grand Exchange', 'Varrock east (cuts close to sawmill)']);

    OAK_TREE:
      Self.BankSelector.AddItemArray(['Power WC (cut and drop)',
      'Varrock east (cuts close to sawmill)', 'Varrock west']);

    WILLOW_TREE:
      Self.BankSelector.AddItemArray(['Power WC (cut and drop)', 'Draynor']);

    TEAK_TREE:
      Self.BankSelector.AddItemArray(['Power WC (cut and drop)', 'Prifddinas']);

    MAPLE_TREE:
      Self.BankSelector.AddItemArray(['Power WC (cut and drop)',
      'Seers'' village', 'Woodcutting guild']);

    MAHOGANY_TREE:
      Self.BankSelector.AddItem('Prifddinas');

    YEW_TREE:
      Self.BankSelector.AddItemArray(['Seers'' village', 'Edgeville',
      'Woodcutting guild']);

    BLISTERWOOD_TREE:
      Self.BankSelector.AddItem('Power WC (cut and drop)');

    MAGIC_TREE:
      Self.BankSelector.AddItemArray(['Woodcutting guild', 'Prifddinas']);
  end;

  Self.BankSelector.SetItemIndex(0);
  Self.BankSelectorOnChange(Self.BankSelector.ComboBox);
end;

procedure TCutterConfig.Run(); override;
var
  tab: TTabSheet;
begin
  Self.Setup('Wasp Woodcutter');
  Self.Start.setOnClick(@Self.StartScript);

  Self.AddTab('Script Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  Self.CreateAccountManager(tab);

  with Self.TreeSelector do
  begin
    Create(tab);
    SetCaption('Tree type:');
    SetLeft(TControl.AdjustToDPI(15));
    SetTop(TControl.AdjustToDPI(150));
    SetStyle(csDropDownList);
    AddItemArray(['Regular tree', 'Oak tree', 'Willow tree', 'Teak tree',
                  'Maple tree', 'Mahogany tree', 'Yew tree', 'Blisterwood tree',
                  'Magic tree']);
    SetItemIndex(Ord(CurrentTree));
    Combobox.SetOnChange(@Self.TreeSelectorOnChange);
  end;

  with Self.BankSelector do
  begin
    Create(tab);
    SetCaption('Bank location:');
    SetLeft(Self.TreeSelector.GetLeft());
    SetTop(Self.TreeSelector.GetBottom() + TControl.AdjustToDPI(15));
    SetStyle(csDropDownList);
    Combobox.SetOnChange(@Self.BankSelectorOnChange);
  end;

  with Self.PickNestsState do
  begin
    Create(tab);
    SetCaption('Pick nests');
    SetLeft(Self.TreeSelector.GetRight() + TControl.AdjustToDPI(15));
    SetTop(Self.TreeSelector.GetTop() + TControl.AdjustToDPI(15));
    SetChecked(True);
  end;

  with Self.SawmillState do
  begin
    Create(tab);
    SetCaption('Sawmill');
    SetLeft(Self.PickNestsState.GetLeft());
    SetTop(Self.BankSelector.GetTop() + TControl.AdjustToDPI(15));
  end;

  Self.CreateVersionPanel(tab);
  Self.CreateAntibanManager();
  Self.CreateWaspLibSettings();
  Self.CreateAPISettings();

  Self.TreeSelectorOnChange(Self.TreeSelector.Combobox);

  inherited;
end;

var
  CutterConfig: TCutterConfig;
{$ENDIF}

begin
  {$IFDEF SCRIPT_GUI}
  CutterConfig.Run();
  {$ENDIF}
  Woodcutter.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
