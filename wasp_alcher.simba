{$DEFINE SCRIPT_ID := 'f6fc217a-3b03-44e1-8fa7-662dfb48f6d7'}
{$DEFINE SCRIPT_REVISION := '24'}
{$IFNDEF SCRIPT_CHAIN}
  {$DEFINE SCRIPT_GUI}
  {$I SRL-T/osr.simba}
  {$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
end;
{$ENDIF}

var
  CustomItem: TRSItem := 'noted Rune 2h sword';
  AlchSpell: ERSSpell := ERSSpell.HIGH_LEVEL_ALCHEMY;
  LossProtection: Boolean := True;
  WalkGE: Boolean := True;

type
  EAlcherState = (
    OPEN_BANK,
    WITHDRAW_NATS,
    WITHDRAW_MONEY,

    OPEN_COLLECT,
    HANDLE_COLLECT,

    CLOSE_INTERFACE,

    OPEN_MAGIC_TAB,
    CHOOSE_SPELL,

    OPEN_INV_TAB,
    CHOOSE_ITEM,
    DESELECT_ITEM,
    HANDLE_WARNING,
    WALK_ALCH,

    CLOSE_CONTEXT,

    SWITCH_ITEM,
    OUT_OF_ITEMS,
    OUT_OF_NATURES,
    END_SCRIPT
  );

  TAlcher = record(TBaseBankScript)
    State: EAlcherState;
    AlchItem: TRSItem;
    InGE: Boolean;
  end;

const
  VARROCK_BOUNDS: TPointArray = [
    [7941, 2831], [7941, 2363], [8337, 2370], [8341, 2837]
  ];

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.MAGIC, ERSSkill.TOTAL];
  Self.MinZoom := 10;
  Self.MaxZoom := 90;

  inherited;
end;

procedure TAlcher.Init(maxActions: Int32; maxTime: Int64); override;
begin
  inherited;

  Self.RSW.Setup([RSRegions.GRAND_EXCHANGE]);

  AlchItemArray += CustomItem;

  if not Magic.IsSpellBook(ERSSpellBook.STANDARD) then
    Self.Fatal('Not on Standard Spell Book');
end;


procedure TAlcher.SetupAlchItems();
var
  item: TRSItem;
  Slot: Int32;
  ItemString: String;
begin
  if not Inventory.Open() and not Inventory.SetSelectedItem(-1) then
    Exit;

  for item in AlchItemArray do
  begin
    if Inventory.FindItem(item, Slot) then
    begin
      ItemString := ToStr(item);

      Writeln('Found possible item to alch: ', ItemString + '.');

      if ItemString.Contains('noted ') then
        ItemString := ItemString.After('noted ');

      Self.ActionProfit := ItemData.GetHighAlchProfit(ItemString);
      Writeln('Profit per alch: ', Self.ActionProfit, '.');

      if not LossProtection or (Self.ActionProfit > -350) then //350 gp threshold to account for price fluctuations.
      begin
        Self.AlchItem := item;
        Exit;
      end;

      Writeln('Item is not profitable');
    end;
  end;

  Self.AlchItem := 'null';
end;


function TAlcher.ChooseSpell(): Boolean;
begin
  if not Magic.IsOpen and not Magic.CanActivate(AlchSpell) then
    Exit;
  Result := Magic.CastSpell(AlchSpell);
end;

function TAlcher.DeselectItem(): Boolean;
begin
  if Inventory.SetSelectedSlot(-1) then
  begin
    Wait(1200, 2000);
    Result := WaitUntil(Inventory.ContainsItem(Self.AlchItem), 100, 2000);
  end;
end;

function TAlcher.MoveItem(): Boolean;
var
  Slot: Int32;
begin
  if Inventory.FindItem(Self.AlchItem, Slot) and (Slot = 11) then
    Exit;

  Result := Inventory.Drag(Slot, 11);
end;

function TAlcher.ChooseItem(): Boolean;
var
  slot: Int32;
  slots: TIntegerArray;
begin
  if ToStr(Self.AlchItem) = '' then
    Self.SetupAlchItems;

  if Inventory.FindItem(Self.AlchItem, slot) then
  begin
    if (slot <> 11) and Inventory.ItemIsStackable(Self.AlchItem) then
    begin
      if ChooseOption.Open() then
        ChooseOption.Select('Cancel');
      Self.MoveItem();
      Exit(False);
    end;

    if SRL.Dice(99.95) and Inventory.ClickSlot(slot, '>') then
    begin
      if WaitUntil(Magic.IsOpen(), 50, SRL.TruncatedGauss(1200, 2000)) then
      begin
        WL.Activity.Restart();
        Self.TotalActions := Round(XPBar.Read() - WL.XP.Start / 65);
        Self.TotalProfit := Self.TotalActions * Self.ActionProfit;

        Wait(800, 1200 + Round(Antiban.GetUniqueNumber(800, 200, 1500)));
        Exit(True);
      end;

      Wait(600, 800);
    end
    else
    begin
      slots := Inventory.GetEmptySlots();
      Inventory.ClickSlot(Inventory.RandomSlotNearby(slot, slots));
      Exit(False);
    end;
  end
  else
    Self.AlchItem := '';
end;

function TAlcher.HandleWarning(): Boolean;
begin
  if Chat.HasContinue then
    Chat.ClickContinue();
  Chat.ClickOption('Cancel the', False);

  if not Magic.Open then
    Exit;

  if Magic.MouseSpell(AlchSpell, MOUSE_RIGHT) and ChooseOption.IsOpen then
    ChooseOption.Select('Warnings');

  WaitUntil(Chat.HasContinue, 50, 2000);
  Chat.ClickContinue();
  WaitUntil(Chat.ClickOption('Set value', False), 50, 3000);
  Wait(2000);
  Result := Chat.AnswerQuery('Set value threshold for', '50000', 1000);
  WaitUntil(Chat.HasContinue, 50, 2000);
  Chat.ClickContinue();
  WaitUntil(Chat.ClickOption('Cancel', False), 50, 3000);
  Wait(2000);
end;


function TAlcher.Terminate(): Boolean; override;
begin
  Result := True;
end;


function TAlcher.GetState(): EAlcherState;
begin
  if WL.Activity.IsFinished() then
    Exit(EAlcherState.END_SCRIPT);

  if ChooseOption.IsOpen() then
    Exit(EAlcherState.CLOSE_CONTEXT);

  if MainScreen.HasInterface() then
  begin
    if Bank.IsOpen() then
    begin
      if not Inventory.ContainsItem('Nature rune') then
        Exit(EAlcherState.WITHDRAW_NATS);

      if not Inventory.ContainsItem('Coins') then
        Exit(EAlcherState.WITHDRAW_MONEY);

      Exit(EAlcherState.CLOSE_INTERFACE);
    end;

    if CollectBox.IsOpen() then
    begin
      if Self.CollectEmpty then
        Exit(EAlcherState.CLOSE_INTERFACE);
      Exit(EAlcherState.HANDLE_COLLECT);
    end;

    Exit(EAlcherState.CLOSE_INTERFACE);
  end;

  if WalkGE and not Self.InGE then
  begin
    Self.InGE := Self.RSW.AtTile(RSObjects.GEBank.Coordinates, 30);
    if not Self.InGE then
      Exit(EAlcherState.WALK_ALCH);
  end;

  if Chat.HasContinue() then
    Exit(EAlcherState.HANDLE_WARNING);

  if Magic.IsOpen() then
  begin
    if Magic.IsSpellSelected(AlchSpell) then
      Exit(EAlcherState.OPEN_INV_TAB);

    if not Magic.CanActivate(AlchSpell) and
       not Inventory.ContainsItem('Nature rune') then
    begin
      if BankEmpty and CollectEmpty then
        Exit(EAlcherState.OUT_OF_NATURES);

      if BankEmpty then
        Exit(EAlcherState.OPEN_COLLECT);

      Exit(EAlcherState.OPEN_BANK);
    end;

    Exit(EAlcherState.CHOOSE_SPELL);
  end;

  if Inventory.IsOpen() then
  begin
    if ToStr(Self.AlchItem) = '' then
      Exit(EAlcherState.SWITCH_ITEM);
    if ToStr(Self.AlchItem) = 'null' then
      Exit(EAlcherState.OUT_OF_ITEMS);

    if not Inventory.ContainsItem(Self.AlchItem) then
    begin
      if Inventory.GetSelectedSlot() > -1 then
        Exit(EAlcherState.DESELECT_ITEM);

      Exit(EAlcherState.SWITCH_ITEM);
    end;
      
    if MainScreen.IsUpText('Alchemy ->') then
      Exit(EAlcherState.CHOOSE_ITEM);
  end;

  Exit(EAlcherState.OPEN_MAGIC_TAB);
end;

procedure TAlcher.Run(maxActions: Int32; maxTime: Int64);
begin
  Self.Init(maxActions, maxTime);

  repeat
    State := Self.GetState();
    Self.SetAction(ToStr(State));

    case State of
      EAlcherState.WALK_ALCH: InGe := Self.RSW.WebWalk(RSObjects.GEBank.Coordinates, 10, 0.2);

      EAlcherState.OPEN_BANK: Bank.WalkOpen();
      EAlcherState.WITHDRAW_NATS: Self.Withdraw(['Nature rune', -1, False]);
      EAlcherState.WITHDRAW_MONEY: Self.Withdraw(['Coins', -1, False]);

      EAlcherState.OPEN_COLLECT: CollectBox.WalkOpen();
      EAlcherState.HANDLE_COLLECT: Self.HandleCollectBox(['Coins', 'Nature rune']);
      EAlcherState.CLOSE_INTERFACE: MainScreen.CloseInterface();

      EAlcherState.CHOOSE_SPELL: Self.ChooseSpell();
      EAlcherState.CHOOSE_ITEM: Self.ChooseItem();
      EAlcherState.OPEN_MAGIC_TAB: Magic.Open();
      EAlcherState.OPEN_INV_TAB: Inventory.Open();
      EAlcherState.HANDLE_WARNING: Self.HandleWarning();
      EAlcherState.DESELECT_ITEM: Self.DeselectItem();

      EAlcherState.CLOSE_CONTEXT: ChooseOption.Close();

      EAlcherState.SWITCH_ITEM: Self.SetupAlchItems();
      EAlcherState.OUT_OF_ITEMS, EAlcherState.OUT_OF_NATURES,
      EAlcherState.END_SCRIPT: Break;
    end;

    Self.DoAntiban();
  until Self.ShouldStop();

  if not Self.Terminate() then
    Self.Fatal('Didn''t terminate properly. Stopping execution.');
end;

var
  Alcher: TAlcher;

{$IFNDEF SCRIPT_CHAIN}
{$IFDEF SCRIPT_GUI}
type
  TAlcherConfig = record(TScriptForm)
    AlchSelector: TLabeledCombobox;
    IgnoreProfit: TLabeledCheckbox;
    WalkGECheckbox: TLabeledCheckbox;
    CustomItemSelector: TLabeledEdit;
  end;

procedure TAlcherConfig.StartScript(sender: TObject); override;
var
  str: String;
begin
  case Self.AlchSelector.GetItemIndex() of
    0: AlchSpell := ERSSpell.HIGH_LEVEL_ALCHEMY;
    1: AlchSpell := ERSSpell.LOW_LEVEL_ALCHEMY;
  end;

  LossProtection := Self.IgnoreProfit.IsChecked();
  WalkGE := Self.WalkGECheckbox.IsChecked();

  str := Self.CustomItemSelector.GetText();
  if str = '' then
    str := 'noted Rune 2h sword';
  CustomItem := str;

  inherited;
end;

procedure TAlcherConfig.Run(); override;
var
  tab: TTabSheet;
begin
  Self.Setup('Wasp Alcher');
  Self.Start.setOnClick(@Self.StartScript);

  Self.AddTab('Script Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  Self.CreateAccountManager(tab);

  with Self.AlchSelector do
  begin
    Create(tab);
    SetCaption('Alchemy spell:');
    SetLeft(TControl.AdjustToDPI(20));
    SetTop(TControl.AdjustToDPI(200));
    Combobox.setStyle(csDropDownList);
    Combobox.getItems.Add('High alchemy');
    Combobox.getItems.Add('Low alchemy');
    Combobox.setItemIndex(0);
  end;

  with Self.IgnoreProfit do
  begin
    Create(tab);
    SetCaption('Prevent loss');
    SetLeft(Self.AlchSelector.GetRight() + TControl.AdjustToDPI(20));
    SetTop(Self.AlchSelector.GetTop() + TControl.AdjustToDPI(17));
    SetChecked(LossProtection);
  end;

  with Self.WalkGECheckbox do
  begin
    Create(tab);
    SetCaption('Walk to GE (Varrock only)');
    SetLeft(Self.IgnoreProfit.GetRight() + TControl.AdjustToDPI(20));
    SetTop(Self.IgnoreProfit.GetTop());
    SetChecked(WalkGE);
  end;

  with Self.CustomItemSelector do
  begin
    Create(tab);
    SetCaption('Custom item to alch:');
    SetLeft(Self.AlchSelector.GetLeft());
    SetTop(Self.AlchSelector.GetBottom() + TControl.AdjustToDPI(20));
    SetText(ToStr(CustomItem));
  end;

  Self.CreateVersionPanel(tab);
  Self.CreateAntibanManager();
  Self.CreateWaspLibSettings();
  Self.CreateAPISettings();

  inherited;
end;

var
  AlcherConfig: TAlcherConfig;
{$ENDIF}
{$ENDIF}

{$IFNDEF SCRIPT_CHAIN}
begin
  {$IFDEF SCRIPT_GUI}
  AlcherConfig.Run();
  {$ENDIF}
  Alcher.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
{$ENDIF}
