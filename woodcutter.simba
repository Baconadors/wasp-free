{$UNDEF SCRIPT_ID}{$DEFINE SCRIPT_ID := '207b1ab4-561d-4543-8467-705cdfce98ec'}
{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '11'}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
  StatsPayload.SetUsername('');
end;

type
  ERSBank = (
    POWER_WC, GE, VARROCK_E, VARROCK_W,
    EDGE, SEERS_VILLAGE, DRAYNOR_VILLAGE, WOODCUT_GUILD, PRIFDDINAS
  );

  ERSTree = (
    REGULAR_TREE, OAK_TREE, WILLOW_TREE,
    TEAK_TREE, MAPLE_TREE, MAHOGANY_TREE, YEW_TREE,
    BLISTERWOOD_TREE, MAGIC_TREE
  );

var
  CurrentTree: ERSTree := ERSTree.TEAK_TREE;
  BankLocation: ERSBank := ERSBank.POWER_WC;
  UseSawmill: Boolean := False;
  PickNests: Boolean := True;

type
  EWoodcutterState = (
    OPEN_BANK,
    DEPOSIT_ITEMS,
    CLOSE_INTERFACE,

    WALK_SPOT,
    WAIT_STATE,

    EQUIP_GEAR,
    PICKUP_NEST,
    LEVEL_UP,
    USE_SPEC,
    CUT_TREE,

    OPEN_SAWMILL,
    HANDLE_MAKE,

    DROP_ITEMS,

    END_SCRIPT
  );

  TWoodcutter = record(TBaseBankScript)
    State: EWoodcutterState;

    RSTree: TRSObject;
    TreeTimerMultiplier: Int32;

    ToolType: TCTS2Color;
    ToolShift: Int32;

    GearOutfit: TRSItemArray;
    Plank: TRSItem;
    PlankPrice: Int32;
    SawmillString: String;
    BankList: TRSItemArray;
    DropList: TRSItemArray;

    Woodcutting: Boolean;
    UseBank: Boolean;
  end;

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.WOODCUTTING, ERSSkill.TOTAL];
  Self.MinZoom := 30;
  Self.MaxZoom := 60;

  inherited;
end;

procedure TWoodcutter.SetupTree();
begin
  if not Self.UseBank then
  begin
    RSObjects.Setup();
    RSObjects.RegularTree.Filter.Skip := False;
    RSObjects.OakTree.Filter.Skip := False;
    RSObjects.WillowTree.Filter.Skip := False;
    RSObjects.TeakTree.Filter.Skip := False;
    RSObjects.MapleTree.Filter.Skip := False;
    RSObjects.MahoganyTree.Filter.Skip := False;
    RSObjects.YewTree.Filter.Skip := False;
    RSObjects.BlisterwoodTree.Filter.Skip := False;
    RSObjects.MagicTree.Filter.Skip := False;

    RSObjects.RegularTree.Setup(['own Tree']);
    RSObjects.OakTree.Setup(['own Oak']);
    RSObjects.WillowTree.Setup(['own Wil']);
    RSObjects.TeakTree.Setup(['own Tea']);
    RSObjects.MapleTree.Setup(['own Map']);
    RSObjects.MahoganyTree.Setup(['own Maho']);
    RSObjects.YewTree.Setup(['own Yew']);
    RSObjects.BlisterwoodTree.Setup(['Chop Blister']);
    RSObjects.MagicTree.Setup(['own Magi']);
  end;

  TreeTimerMultiplier := 1;

  case CurrentTree of
    ERSTree.REGULAR_TREE:
      begin
        RSTree := RSObjects.RegularTree;
        Plank := 'Plank';
        PlankPrice := 100;
        SawmillString := 'Wood - 100gp';
      end;

    ERSTree.OAK_TREE:
      begin
        RSTree := RSObjects.OakTree;
        Plank := 'Oak plank';
        PlankPrice := 250;
        SawmillString := 'Oak - 250gp';
      end;

    ERSTree.TEAK_TREE:
      begin
        RSTree := RSObjects.TeakTree;
        Plank := 'Teak plank';
        PlankPrice := 500;
        SawmillString := 'Teak - 500gp';
      end;

    ERSTree.MAHOGANY_TREE:
      begin
        RSTree := RSObjects.MahoganyTree;
        Plank := 'Mahogany plank';
        PlankPrice := 1500;
        SawmillString := 'Mahogany - 1,500gp';
      end;


    ERSTree.WILLOW_TREE:      RSTree := RSObjects.WillowTree;
    ERSTree.MAPLE_TREE:       RSTree := RSObjects.MapleTree;
    ERSTree.YEW_TREE:         RSTree := RSObjects.YewTree;
    ERSTree.BLISTERWOOD_TREE: RSTree := RSObjects.BlisterwoodTree;
    ERSTree.MAGIC_TREE:       RSTree := RSObjects.MagicTree;
  end;

  if Ord(CurrentTree) >= Ord(ERSTRee.MAPLE_TREE) then
    TreeTimerMultiplier += 1;

  if Ord(CurrentTree) >= Ord(ERSTRee.YEW_TREE) then
    TreeTimerMultiplier += 2;

  if Ord(CurrentTree) >= Ord(ERSTRee.MAGIC_TREE) then
    TreeTimerMultiplier += 3;

  DropList := [
    'Logs', 'Oak logs', 'Willow logs', 'Teak logs', 'Maple logs',
    'Mahogany logs', 'Yew logs', 'Blisterwood logs', 'Magic logs'
  ];

  BankList := DropList;

  if ToStr(Plank) <> '' then
    BankList += Plank;

  BankList += 23866;
  BankList += 23966;
  BankList += 23967;
  BankList += 23968;
  BankList += 23969;
  BankList += 23970;  //Crystal shards
end;

procedure TWoodcutter.SetupBank();
begin
  case BankLocation of
    WOODCUT_GUILD:
      begin
        RSW.Setup([RSRegions.WOODCUTTING_GUILD]);
        UseBank := True;
      end;

    GE, VARROCK_W:
      begin
        RSW.Setup([RSRegions.VARROCK_WEST]);
        UseBank := True;
      end;

    VARROCK_E:
      begin
        RSW.Setup([RSRegions.VARROCK_EAST]);
        UseBank := True;
      end;

    EDGE:
      begin
        RSW.Setup([RSRegions.EDGEVILLE]);
        UseBank := True;
      end;

    PRIFDDINAS:
      begin
        Self.RSW.Setup([RSRegions.PRIFDDINAS]);
        UseBank := True;
      end;

    DRAYNOR_VILLAGE:
      begin
        RSW.Setup([RSRegions.DRAYNOR_VILLAGE]);
        UseBank := True;
      end;

    POWER_WC:
      begin
        UseBank := False;
        RSGroundItems.Setup();
      end;
  end;
end;

procedure TWoodcutter.SetupTool();
begin
  if Equipment.Open then
  begin
    ToolShift := 30;
    if Equipment.ContainsAny(['Crystal axe', 'Crystal axe (inactive)']) then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39); //need to add proper color later
    end
    else if Equipment.ContainsItem('Infernal axe') then
    begin
      ToolShift := 70;
      ToolType := CTS2(662647, 11, 0.17, 1.50); //need to add proper color later
    end
    else if Equipment.ContainsItem('3rd age axe') then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39);
    end
    if Equipment.ContainsItem('Dragon axe') then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39);
    end
    else if Equipment.ContainsItem('Gilded axe') then
      ToolType := CTS2(1019842, 14, 0.02, 0.63)
    else if Equipment.ContainsItem('Rune axe') then
      ToolType := CTS2(6050622, 12, 0.10, 0.11)
    else if Equipment.ContainsItem('Adamant axe') then
      ToolType := CTS2(3951419, 11, 0.13, 0.16)
    else if Equipment.ContainsItem('Mithril axe') then
      ToolType := CTS2(4534853, 17, 1.11, 0.34)
    else if Equipment.ContainsItem('Black axe') then
      ToolType := CTS2(1118485, 1, 0.01, 0.01)
    else if Equipment.ContainsItem('Steel axe') then
      ToolType := CTS2(6711151, 17, 0.11, 0.07)
    else if Equipment.ContainsItem('Iron axe') then
      ToolType := CTS2(4671309, 11, 0.28, 0.09)
    else if Equipment.ContainsItem('Bronze axe') then
      ToolType := CTS2(1979716, 9, 0.10, 0.24);
  end;

  if (ToolType = []) and Inventory.Open then
  begin
    ToolShift := 30;
    if Inventory.ContainsAny(['Crystal axe', 'Crystal axe (inactive)']) then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39); //need to add proper color later
    end
    else if Inventory.ContainsItem('Infernal axe') then
    begin
      ToolShift := 70;
      ToolType := CTS2(662647, 11, 0.17, 1.50); //need to add proper color later
    end
    else if Inventory.ContainsItem('3rd age axe') then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39);
    end
    if Inventory.ContainsItem('Dragon axe') then
    begin
      ToolShift := 110;
      ToolType := CTS2(397665, 9, 0.16, 1.39);
    end
    else if Inventory.ContainsItem('Gilded axe') then
      ToolType := CTS2(1019842, 14, 0.02, 0.63)
    else if Inventory.ContainsItem('Rune axe') then
      ToolType := CTS2(6050622, 12, 0.10, 0.11)
    else if Inventory.ContainsItem('Adamant axe') then
      ToolType := CTS2(3951419, 11, 0.13, 0.16)
    else if Inventory.ContainsItem('Mithril axe') then
      ToolType := CTS2(4534853, 17, 1.11, 0.34)
    else if Inventory.ContainsItem('Black axe') then
      ToolType := CTS2(1118485, 1, 0.01, 0.01)
    else if Inventory.ContainsItem('Steel axe') then
      ToolType := CTS2(6711151, 17, 0.11, 0.07)
    else if Inventory.ContainsItem('Iron axe') then
      ToolType := CTS2(4671309, 11, 0.28, 0.09)
    else if Inventory.ContainsItem('Bronze axe') then
      ToolType := CTS2(1979716, 9, 0.10, 0.24);
  end;
end;


procedure TWoodcutter.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  inherited;

  Self.SetupBank();
  Self.SetupTree();

  GearOutfit := [
    'Lumberjack hat',
    'Lumberjack top',
    'Lumberjack legs',
    'Lumberjack boots',
    'Strung rabbit foot'
  ];

  if Antiban.BioDice() then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN)
  else
    Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_RIGHT_CLICK);

  Self.SetupTool();

  if WLSettings.RemoteInput.ScriptDebug then
  begin
    DebugObjectArray += RSTree;
    DebugNPCArray += RSNPCs.SawmillOperator;
  end;
end;


function TWoodcutter.CutTree(): Boolean;
begin
  if (UseBank and RSTree.WalkClick) or RSTree.Click then
  begin
    Minimap.WaitMoving;
    Result := Woodcutting := True;
  end;
end;

function TWoodcutter.HasGear(): Boolean;
begin
  Result := Inventory.ContainsAny(GearOutfit);
end;

function TWoodcutter.EquipGear(): Boolean;
var
  Item: TRSItem;
begin
  for Item in GearOutfit do
    if Inventory.ClickItem(Item) then
      Wait(200, 300);

  Result := not Self.HasGear;
end;

function TWoodcutter.DropItems(): Boolean;
var
  InvCount: Int32 := 28;
begin
  Result := Inventory.ShiftDrop(DropList, Inventory.RandomPattern);

  TotalActions += (InvCount - Inventory.Count);
end;


function TWoodcutter.HasEnoughMoney(): Boolean;
begin
  Result := Inventory.CountItemStack('Coins') >= PlankPrice;
end;


function TWoodcutter.CheckNest(): Boolean;
begin
  Result := PickNests and RSGroundItems.BirdNest.Find();
end;

function TWoodcutter.PickNest(): Boolean;
begin
  if Result := RSGroundItems.BirdNest.Click(True, 0) then
  begin
    Woodcutting := False;
    Wait(800);
    Minimap.WaitPlayerMoving(300, 8000);
    Wait(300);
  end;
end;


function TWoodcutter.OpenSawmill(): Boolean;
begin
  if BankLocation = ERSBank.PRIFDDINAS then
  begin
    if not Self.RSW.WebWalk([4103, 2075], 15, 0.2) then
      Exit;
    if not RSNPCs.SawmillOperator.SelectOption(['Buy', 'plank']) then
      Exit;
  end
  else if not RSNPCs.SawmillOperator.WalkSelectOption(['Buy', 'plank']) then
    Exit;

  Minimap.WaitPlayerMoving(300, 10000);
  Result := WaitUntil(Make.IsOpen(), 100, 10000);
end;

function TWoodcutter.MakePlanks(): Boolean;
begin
  if Make.Select(SawmillString, MAKE_QUANTITY_ALL, SRL.Dice(95)) then
    Result := WaitUntil(Inventory.ContainsItem(Plank), 200, 10000);
end;


function TSRL.IsAnimating(Area:TBox; Shift, WaitTime:UInt32; Iter:UInt32=1): Boolean; override;
var
  i:Int32;
begin
  for i:=1 to Iter do
    if (Self.GetPixelShift(Area, WaitTime) > shift) or XPBar.EarnedXP then
      Exit(True);
end;

function TWoodcutter.IsCutting(): Boolean;
var
  B: TBox := MainScreen.GetPlayerBox;
begin
  Result := Woodcutting := SRL.IsAnimating(B, MainScreen.NormalizeDistance(600), 350, 10 * TreeTimerMultiplier);
end;

function TWoodcutter.WaitCutting(): Boolean;
begin
  if Result := Self.IsCutting then WL.Activity.Restart();
end;

function TWoodcutter.GetState(): EWoodcutterState;
begin
  if XPBar.EarnedXP() then
    Exit(EWoodcutterState.WAIT_STATE);

  if WL.Activity.IsFinished() then
    Exit(EWoodcutterState.END_SCRIPT);

  if Chat.LeveledUp() then
  begin
    Woodcutting := False;
    Exit(EWoodcutterState.LEVEL_UP);
  end;

  if UseSawmill and Make.IsOpen() then
    Exit(EWoodcutterState.HANDLE_MAKE);

  if MainScreen.HasInterface() then
  begin
    if Bank.IsOpen() and Inventory.ContainsAny(BankList) then
      Exit(EWoodcutterState.DEPOSIT_ITEMS);
    Exit(EWoodcutterState.CLOSE_INTERFACE);
  end;

  if Self.HasGear() then
    Exit(EWoodcutterState.EQUIP_GEAR);

  if Inventory.IsFull() then
  begin
    Woodcutting := False;

    if not UseBank then
      Exit(EWoodcutterState.DROP_ITEMS);

    if UseSawmill and not Inventory.ContainsItem(Plank) and Self.HasEnoughMoney() then
      Exit(EWoodcutterState.OPEN_SAWMILL);

    Exit(EWoodcutterState.OPEN_BANK);
  end;

  if Self.Woodcutting then
    Exit(EWoodcutterState.WAIT_STATE);

  if UseBank and not RSW.AtTile(RSTree.Coordinates, 15) then
    Exit(EWoodcutterState.WALK_SPOT);

  if Self.CheckNest() then
    Exit(EWoodcutterState.PICKUP_NEST);

  if Minimap.IsSpecWeapon() and (Minimap.GetSpecLevel = 100) then
    Exit(EWoodcutterState.USE_SPEC);

  Exit(EWoodcutterState.CUT_TREE);
end;

procedure TWoodcutter.Run(MaxActions: Int32; MaxTime: Int64);
begin
  Self.Init(MaxActions, MaxTime);

  repeat
    State := Self.GetState();
    Self.SetAction(ToStr(State));

    case State of
      EWoodcutterState.OPEN_BANK: Bank.WalkOpen();
      EWoodcutterState.DEPOSIT_ITEMS: Bank.DepositItemArray(BankTab, BankList, True);
      EWoodcutterState.CLOSE_INTERFACE: MainScreen.CloseInterface();
      EWoodcutterState.WALK_SPOT: RSW.WebWalk(RSTree.Coordinates, 10, 0.2);
      EWoodcutterState.WAIT_STATE: Self.WaitCutting();
      EWoodcutterState.LEVEL_UP: Chat.HandleLevelUp();
      EWoodcutterState.EQUIP_GEAR: Self.EquipGear();
      EWoodcutterState.USE_SPEC: Minimap.EnableSpec(100);
      EWoodcutterState.PICKUP_NEST: Self.PickNest();
      EWoodcutterState.CUT_TREE: Self.CutTree();
      EWoodcutterState.OPEN_SAWMILL: Self.OpenSawmill();
      EWoodcutterState.HANDLE_MAKE: Self.MakePlanks();
      EWoodcutterState.DROP_ITEMS: Self.DropItems();
      EWoodcutterState.END_SCRIPT: Break;
    end;

    Self.DoAntiban();
  until Self.ShouldStop();
end;

var
  Woodcutter: TWoodcutter;

{$IFDEF SCRIPT_GUI}
type
  TCutterConfig = record(TScriptForm)
    TreeSelector: TLabeledCombobox;
    BankSelector: TLabeledCombobox;
    SawmillState: TCheckbox;
    PickNestsState: TCheckbox;
  end;

procedure TCutterConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentTree := ERSTree(Self.TreeSelector.Combobox.getItemIndex());

  case Self.BankSelector.Combobox.getText() of
    'Power WC (cut and drop)': BankLocation := ERSBank.POWER_WC;
    'Grand Exchange':          BankLocation := ERSBank.GE;
    'Varrock east':            BankLocation := ERSBank.VARROCK_E;
    'Varrock west':            BankLocation := ERSBank.VARROCK_W;
    'Draynor':                 BankLocation := ERSBank.DRAYNOR_VILLAGE;
    'Seers'' village':         BankLocation := ERSBank.SEERS_VILLAGE;
    'Edgeville':               BankLocation := ERSBank.EDGE;
    'Woodcutting guild':       BankLocation := ERSBank.WOODCUT_GUILD;
    'Prifddinas':              BankLocation := ERSBank.PRIFDDINAS;
  end;

  UseSawmill := Self.SawmillState.IsChecked();
  PickNests := Self.PickNestsState.IsChecked();
end;

{$H-}
procedure TCutterConfig.TreeSelectorOnChange(Sender: TObject);
begin
  case ERSTree(Self.TreeSelector.Combobox.getItemIndex()) of
    REGULAR_TREE:
      begin
        Self.BankSelector.Clear;
        Self.BankSelector.AddItem('Power WC (cut and drop)');
        Self.BankSelector.AddItem('Grand Exchange');
        Self.BankSelector.AddItem('Varrock east (cuts close to sawmill)');
        Self.SawmillState.setEnabled(False);
      end;

    OAK_TREE:
      begin
        Self.BankSelector.Clear;
        Self.BankSelector.AddItem('Power WC (cut and drop)');
        Self.BankSelector.AddItem('Varrock east (cuts close to sawmill)');
        Self.BankSelector.AddItem('Varrock west');
        Self.SawmillState.setEnabled(False);
      end;

    WILLOW_TREE:
      begin
        Self.BankSelector.Clear;
        Self.BankSelector.AddItem('Power WC (cut and drop)');
        Self.BankSelector.AddItem('Draynor');
        Self.SawmillState.setEnabled(False);
      end;

    TEAK_TREE:
      begin
        Self.BankSelector.Clear;
        Self.BankSelector.AddItem('Power WC (cut and drop)');
        Self.BankSelector.AddItem('Prifddinas');
        Self.SawmillState.setEnabled(False);
      end;

    MAPLE_TREE:
      begin
        Self.BankSelector.Clear;
        Self.BankSelector.AddItem('Power WC (cut and drop)');
        Self.BankSelector.AddItem('Seers'' village');
        Self.BankSelector.AddItem('Woodcutting guild');
        Self.SawmillState.setEnabled(False);
      end;

    MAHOGANY_TREE:
      begin
        Self.BankSelector.Clear;
        Self.BankSelector.AddItem('Prifddinas');
        Self.SawmillState.setEnabled(True);
      end;

    YEW_TREE:
      begin
        Self.BankSelector.Clear;
        Self.BankSelector.AddItem('Seers'' village');
        Self.BankSelector.AddItem('Edgeville');
        Self.BankSelector.AddItem('Woodcutting guild');
        Self.SawmillState.setEnabled(False);
      end;

    BLISTERWOOD_TREE:
      begin
        Self.BankSelector.Clear;
        Self.BankSelector.AddItem('Power WC (cut and drop)');
        Self.SawmillState.setEnabled(False);
      end;

    MAGIC_TREE:
      begin
        Self.BankSelector.Clear;
        Self.BankSelector.AddItem('Woodcutting guild');
        Self.BankSelector.AddItem('Prifddinas');
        Self.SawmillState.setEnabled(False);
      end;
  end;

  Self.BankSelector.SetItemIndex(0);
end;

procedure TCutterConfig.BankSelectorOnChange(Sender: TObject);
begin
  case Self.BankSelector.Combobox.getText() of
    'Varrock east', 'Woodcutting guild', 'Prifddinas':
      begin
        case ERSTree(Self.TreeSelector.Combobox.getItemIndex()) of
          REGULAR_TREE, OAK_TREE, TEAK_TREE, MAHOGANY_TREE:
            begin
              Self.SawmillState.setState(cbUnchecked);
              Self.SawmillState.setEnabled(True);
            end;

          else
            begin
              Self.SawmillState.setState(cbUnchecked);
              Self.SawmillState.setEnabled(False);
            end;
        end;
      end;

    else
      begin
        Self.SawmillState.setState(cbUnchecked);
        Self.SawmillState.setEnabled(False);
      end;
  end;
end;
{$H+}

procedure TCutterConfig.Setup(); override;
begin
  inherited;

  UpdateFormSize(Self.Form, 0, Self.Form.GetHeight() + 30);

  with Self.TreeSelector do
  begin
    Init(Self.SSPanel.Panel);
    SetCaption('Tree type:');
    SetLeft(5);
    SetTop(35);
    SetWidth(200);
    SetStyle(csDropDownList);
    AddItem('Regular tree');
    AddItem('Oak tree');
    AddItem('Willow tree');
    AddItem('Teak tree');
    AddItem('Maple tree');
    AddItem('Mahogany tree');
    AddItem('Yew tree');
    AddItem('Blisterwood tree');
    AddItem('Magic tree');
    SetItemIndex(Ord(CurrentTree));
    Combobox.SetOnChange(@Self.TreeSelectorOnChange);
  end;

  with Self.BankSelector do
  begin
    Init(Self.SSPanel.Panel);
    SetCaption('Bank location:');
    SetLeft(5);
    SetTop(Self.TreeSelector.GetTop() + Self.TreeSelector.GetHeight());
    SetWidth(Self.TreeSelector.GetWidth());
    SetStyle(csDropDownList);
    Combobox.SetOnChange(@Self.BankSelectorOnChange);
  end;

  with Self.SawmillState do
  begin
    Init(Self.SSPanel.Panel);
    SetParent(Self.SSPanel.Panel);
    SetCaption('Sawmill:');
    SetLeft(Self.TreeSelector.GetLeft() + Self.TreeSelector.GetWidth() + 25);
    SetTop(Self.TreeSelector.GetTop() + 20);
    SetEnabled(False);
  end;

  with Self.PickNestsState do
  begin
    Init(Self.SSPanel.Panel);
    SetParent(Self.SSPanel.Panel);
    SetCaption('Pick nests:');
    SetLeft(Self.SawmillState.GetLeft());
    SetTop(Self.BankSelector.GetTop() + 20);
    SetChecked(True);
  end;

  Self.TreeSelectorOnChange(Self.BankSelector.Combobox);
  Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
end;

procedure TCutterConfig.Run(); override;
begin
  Self.Setup();

  inherited;
end;

var
  CutterConfig: TCutterConfig;
{$ENDIF}

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@CutterConfig.Run);
  {$ENDIF}
  Woodcutter.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
