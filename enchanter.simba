{$IFNDEF SCRIPT_CHAIN}
  {$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
  {$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
end;
{$ENDIF}

const
  GEM_TYPE: TStringArray = [
    'Opal', 'Jade', 'Red topaz',
    'Sapphire', 'Emerald', 'Ruby',
    'Diamond', 'Dragonstone', 'Onyx',
    'Zenyte'
  ];

  JEWELRY_TYPE: TStringArray = [
    'Ring', 'Necklace', 'Bracelet', 'Amulet'
  ];

var
  RegularJewel: TRSItem = 'Ruby necklace';

type
  EEnchanterState = (
    LEVEL_UP,
    CLOSE_CONTEXT,

    OPEN_BANK,
    WITHDRAW_TOOL,
    WITHDRAW_MATERIAL,
    DEPOSIT_PRODUCT,

    OPEN_COLLECT,
    HANDLE_COLLECT,
    CLOSE_INTERFACE,

    OPEN_MAGIC,
    OPEN_INVENTORY,

    CAST_SPELL,
    ENCHANT_JEWEL,
    CANCEL_SPELL,
    WAIT_ENCHANT,

    END_SCRIPT
  );

  TEnchanter = record(TBaseBankScript)
    State: EEnchanterState;

    Spell: ERSSpell;
    CosmicRune: TRSItem;
    EnchantedJewel: TRSItem;
    Enchanting: Boolean;
  end;

procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.MAGIC, ERSSkill.TOTAL];
  Antiban.MinZoom := 15;
  Antiban.MaxZoom := 85;
end;


procedure TEnchanter.SetSpell;
var
  ItemString: String := ToStr(RegularJewel);
begin
  if ItemString.Contains(['Opal', 'Sapphire']) then
    Spell := ERSSpell.LVL1_ENCHANT
  else if ItemString.Contains(['Jade', 'Emerald']) then
    Spell := ERSSpell.LVL2_ENCHANT
  else if ItemString.Contains(['Topaz', 'Ruby']) then
    Spell := ERSSpell.LVL3_ENCHANT
  else if ItemString.Contains('Diamond') then
    Spell := ERSSpell.LVL4_ENCHANT
  else if ItemString.Contains('Dragon') then
    Spell := ERSSpell.LVL5_ENCHANT
  else if ItemString.Contains('Onyx') then
    Spell := ERSSpell.LVL6_ENCHANT
  else if ItemString.Contains('Zenyte') then
    Spell := ERSSpell.LVL7_ENCHANT
end;

procedure TEnchanter.SetEnchantedJewel;
var
  ItemString: String := ToStr(RegularJewel);
begin

  if ItemString.Contains('Opal') then
  begin
    if ItemString.Contains('ring') then
      EnchantedJewel := 'Ring of pursuit'
    else if ItemString.Contains('necklace') then
      EnchantedJewel := 'Dodgy necklace'
    else if ItemString.Contains('bracelet') then
      EnchantedJewel := 'Expeditious bracelet'
    else if ItemString.Contains('amulet') then
      EnchantedJewel := 'Amulet of bounty';
  end

  else if ItemString.Contains('Jade') then
  begin
    if ItemString.Contains('ring') then
      EnchantedJewel := 'Ring of returning(5)'
    else if ItemString.Contains('necklace') then
      EnchantedJewel := 'Necklace of passage(5)'
    else if ItemString.Contains('bracelet') then
      EnchantedJewel := 'Flamtaer bracelet'
    else if ItemString.Contains('amulet') then
      EnchantedJewel := 'Amulet of Chemistry';
  end

  else if ItemString.Contains('Topaz') then
  begin
    if ItemString.Contains('ring') then
      EnchantedJewel := 'Efaritay''s aid'
    else if ItemString.Contains('necklace') then
      EnchantedJewel := 'Necklace of faith'
    else if ItemString.Contains('bracelet') then
      EnchantedJewel := 'Bracelet of slaughter'
    else if ItemString.Contains('amulet') then
      EnchantedJewel := 'Burning amulet(5)';
  end

  else if ItemString.Contains('Sapphire') then
  begin
    if ItemString.Contains('ring') then
      EnchantedJewel := 'Ring of recoil'
    else if ItemString.Contains('necklace') then
      EnchantedJewel := 'Games necklace(8)'
    else if ItemString.Contains('bracelet') then
      EnchantedJewel := 'Bracelet of clay'
    else if ItemString.Contains('amulet') then
      EnchantedJewel := 'Amulet of magic';
  end

  else if ItemString.Contains('Emerald') then
  begin
    if ItemString.Contains('ring') then
      EnchantedJewel := 'Ring of dueling(8)'
    else if ItemString.Contains('necklace') then
      EnchantedJewel := 'Binding necklace'
    else if ItemString.Contains('bracelet') then
      EnchantedJewel := 'Castle wars bracelet(3)'
    else if ItemString.Contains('amulet') then
      EnchantedJewel := 'Amulet of defence';
  end

  else if ItemString.Contains('Ruby') then
  begin
    if ItemString.Contains('ring') then
      EnchantedJewel := 'Ring of forging'
    else if ItemString.Contains('necklace') then
      EnchantedJewel := 'Digsite pendant (5)'
    else if ItemString.Contains('bracelet') then
      EnchantedJewel := 'Inoculation bracelet'
    else if ItemString.Contains('amulet') then
      EnchantedJewel := 'Amulet of strength';
  end

  else if ItemString.Contains('Diamond') then
  begin
    if ItemString.Contains('ring') then
      EnchantedJewel := 'Ring of life'
    else if ItemString.Contains('necklace') then
      EnchantedJewel := 'Phoenix necklace'
    else if ItemString.Contains('bracelet') then
      EnchantedJewel := 'Abyssal bracelet(5)'
    else if ItemString.Contains('amulet') then
      EnchantedJewel := 'Amulet of power';
  end

  else if ItemString.Contains('Dragon') then
  begin
    if ItemString.Contains('ring') then
      EnchantedJewel := 'Ring of wealth'
    else if ItemString.Contains('necklace') then
      EnchantedJewel := 'Skills necklace'
    else if ItemString.Contains('bracelet') then
      EnchantedJewel := 'Combat bracelet(4)'
    else if ItemString.Contains('amulet') then
      EnchantedJewel := 'Amulet of glory(4)';
  end

  else if ItemString.Contains('Onyx') then
  begin
    if ItemString.Contains('ring') then
      EnchantedJewel := 'Ring of stone'
    else if ItemString.Contains('necklace') then
      EnchantedJewel := 'Berserker necklace'
    else if ItemString.Contains('bracelet') then
      EnchantedJewel := 'Regen bracelet'
    else if ItemString.Contains('amulet') then
      EnchantedJewel := 'Amulet of fury';
  end

  else if ItemString.Contains('Zenyte') then
  begin
    if ItemString.Contains('ring') then
      EnchantedJewel := 'Ring of suffering'
    else if ItemString.Contains('necklace') then
      EnchantedJewel := 'Necklace of anguish'
    else if ItemString.Contains('bracelet') then
      EnchantedJewel := 'Tormented bracelet'
    else if ItemString.Contains('amulet') then
      EnchantedJewel := 'Amulet of torture';
  end;


end;

procedure TEnchanter.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'AIO Enchanter';

  inherited;
  Self.SetupWLBanks;

  ExtraInfo := ' Currently enchanting: ' + RegularJewel + '.';

  CosmicRune := 'Cosmic rune';
  Self.SetSpell;
  Self.SetEnchantedJewel;

  ActionProfit := (
    ItemData.GetAverage(EnchantedJewel) -
    ItemData.GetAverage(CosmicRune) + ItemData.GetAverage(RegularJewel)
  );

  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;

  if ScriptDebugEnabled then
    DebugObjectArray += @ScriptBank;
end;


function TEnchanter.HasProduct: Boolean
var
  Slots: TIntegerArray;
begin
  Result := Inventory.FindItem(EnchantedJewel, Slots);
end;


function TEnchanter.EnchantJewel: Boolean;
begin
  if Result := Inventory.ClickItem(RegularJewel) then
  begin
    Enchanting := SRL.Dice(20 * BioHash);
    WaitUntil(Magic.IsOpen, 50, 2000);
  end;
end;

function TEnchanter.WaitEnchanting: Boolean;
begin
  if Enchanting then
    Result := Enchanting := Inventory.ContainsItem(CosmicRune) and Inventory.ContainsItem(RegularJewel) and XPBar.WaitXP(2000)
  else
    Result := Enchanting := XPBar.WaitXP(2000);
end;

function TEnchanter.DeselectSpell: Boolean;
var
  Selected: ERSSpell;
begin
  if Magic.IsOpen then
  begin
    if (Selected := Magic.GetSelectedSpell) <> ERSSpell.UNKNOWN then
    begin
      Magic.MouseSpell(Selected, MOUSE_LEFT);
      Result := Magic.GetSelectedSpell = ERSSpell.UNKNOWN;
    end;
  end
  else if MainScreen.IsUpText('Cast') then
  begin
    ChooseOption.Open;
    ChooseOption.Select('Cancel');
  end;
end;


function TEnchanter.Withdraw(Item: TRSItem): Boolean;
begin
  Result := Bank.WithdrawItem(BankTab, [Item, BANK_WITHDRAW_ALL, False], True);

  if Result then
    WaitUntil(Inventory.ContainsItem(Item), 100, 3000);

  if BankEmpty := (not Result and not Bank.ContainsItem(BankTab, Item)) then
    if CollectEmpty and CollectTimer.IsFinished then
      CollectEmpty := False;
end;

function TEnchanter.Deposit: Boolean;
var
  ItemCount: Int32 := Inventory.CountItem(EnchantedJewel);
begin
  if Result := Bank.DepositItem(BankTab, [EnchantedJewel, BANK_DEPOSIT_ALL], True) then
    if WaitUntil(Inventory.CountItem(EnchantedJewel) = 0, 100, 3000) then
      TotalActions += ItemCount;
end;


function TEnchanter.HandleCollectBox: Boolean;
var
  Slots: TIntegerArray;
begin
  if CollectBox.FindItems([RegularJewel, CosmicRune], Slots) then
  begin
    if Result := CollectEmpty := CollectBox.CollectToBank then
      WaitUntil(not CollectBox.FindItems([RegularJewel, CosmicRune], Slots), 100, 3000);
    BankEmpty := not CollectEmpty;
  end
  else
    CollectEmpty := True;

  CollectTimer.Restart;
end;


function TEnchanter.GetState: EEnchanterState;
begin
  if WL.Activity.IsFinished then
    Exit(EEnchanterState.END_SCRIPT);

  if Chat.LeveledUp then
  begin
    Enchanting := False;
    Exit(EEnchanterState.LEVEL_UP);
  end;

  if MainScreen.HasInterface then
  begin
    if Bank.IsOpen then
    begin
      if Self.HasProduct then
        Exit(EEnchanterState.DEPOSIT_PRODUCT);

      if BankEmpty or Inventory.ContainsAll([CosmicRune, RegularJewel]) then
        Exit(EEnchanterState.CLOSE_INTERFACE);

      if not Inventory.ContainsItem(CosmicRune) then
        Exit(EEnchanterState.WITHDRAW_TOOL);

      if not Inventory.ContainsItem(RegularJewel) then
        Exit(EEnchanterState.WITHDRAW_MATERIAL);
    end;

    if CollectBox.IsOpen then
    begin
      if CollectEmpty or Inventory.ContainsAll([CosmicRune, RegularJewel]) then
        Exit(EEnchanterState.CLOSE_INTERFACE);
      Exit(EEnchanterState.HANDLE_COLLECT);
    end;

    Exit(EEnchanterState.CLOSE_INTERFACE);
  end;

  if Inventory.IsOpen then
  begin
    if Inventory.ContainsAll([CosmicRune, RegularJewel]) then
    begin
      if MainScreen.IsUpText('>') then
        Exit(EEnchanterState.ENCHANT_JEWEL);
      if Enchanting then
        Exit(EEnchanterState.WAIT_ENCHANT);
      Exit(EEnchanterState.OPEN_MAGIC);
    end;

    if MainScreen.IsUpText('>') then
      Exit(EEnchanterState.CANCEL_SPELL);

    if BankEmpty and CollectEmpty then
      Exit(EEnchanterState.END_SCRIPT);

    if BankEmpty then
      Exit(EEnchanterState.OPEN_COLLECT);

    Exit(EEnchanterState.OPEN_BANK);
  end;

  if Magic.IsOpen then
  begin
    if Enchanting or Magic.IsSpellSelected(SPELL) then
      Exit(OPEN_INVENTORY);
    Exit(CAST_SPELL);
  end;

  Exit(EEnchanterState.OPEN_MAGIC);
end;

function TEnchanter.Terminate: Boolean; override;
begin
  if inherited then
    for 0 to 5 do
      if Result := Bank.WithdrawItem(BankTab, [EnchantedJewel, BANK_WITHDRAW_ALL, True], True) then
        Break;
end;

procedure TEnchanter.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  while not Self.ShouldStop do
  begin
    State := Self.GetState;
    Action := ToStr(State);
    Self.ProcessWhileWaiting;

    case State of
      EEnchanterState.OPEN_BANK: Bank.WalkOpen(ScriptBank);
      EEnchanterState.WITHDRAW_TOOL: Self.Withdraw(CosmicRune);
      EEnchanterState.WITHDRAW_MATERIAL: Self.Withdraw(RegularJewel);
      EEnchanterState.DEPOSIT_PRODUCT: Self.Deposit;

      EEnchanterState.OPEN_COLLECT: CollectBox.WalkOpen(ScriptBank);
      EEnchanterState.HANDLE_COLLECT: Self.HandleCollectBox;
      EEnchanterState.CLOSE_INTERFACE: MainScreen.CloseInterface;

      EEnchanterState.WAIT_ENCHANT: Enchanting := XPBar.WaitXP(2000);
      EEnchanterState.LEVEL_UP: Chat.HandleLevelUp(SRL.Dice(75));

      EEnchanterState.OPEN_MAGIC: Magic.Open;
      EEnchanterState.OPEN_INVENTORY: Inventory.Open;
      EEnchanterState.CAST_SPELL: Magic.CastSpell(SPELL);
      EEnchanterState.ENCHANT_JEWEL: Self.EnchantJewel;
      EEnchanterState.CANCEL_SPELL: Self.DeselectSpell;

      EEnchanterState.END_SCRIPT: Break;
    end;

    Self.DoAntiban;
  end;

  if not Self.Terminate then
    TerminateScript('aio_enchanter didn''t terminate properly. Stopping execution.');
end;

var
  Enchanter: TEnchanter;

type
  TEnchanterConfig = record(TBankConfig)
    GemSelector: TLabeledCombobox;
    JewelSelector: TLabeledCombobox;
  end;

procedure TEnchanterConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  RegularJewel := GemSelector.GetText().Replace('Red t', 'T') + ' ' + JewelSelector.GetText.Lower();
end;

procedure TEnchanterConfig.Setup(Strs: TStringArray); override;
var
  Str: String
begin
  inherited;

  with GemSelector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('Gem type:');
    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight + 55);
    SetWidth(200);
    SetStyle(csDropDownList);
    for Str in GEM_TYPE do
      AddItem(Str);
    SetItemIndex(3);
  end;

  with JewelSelector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('Jewel type:');
    SetLeft(GemSelector.GetLeft + GemSelector.GetWidth + 5);
    SetTop(GemSelector.GetTop);
    SetWidth(200);
    SetStyle(csDropDownList);
    for Str in JEWELRY_TYPE do
      AddItem(Str);
    SetItemIndex(0);
  end;

  StartButton.setOnClick(@Self.StartScript);
end;

procedure TEnchanterConfig.Run; override;
begin
  Self.Setup(BankLocationStrings);

  inherited;
end;

var
  EnchanterConfig: TEnchanterConfig;

{$IFNDEF SCRIPT_CHAIN}
begin
  {$IFDEF SCRIPT_GUI}
  Sync(@EnchanterConfig.Run);
  {$ENDIF}
  Enchanter.Run(MaxActions, MaxTime);
end.
{$ENDIF}
