{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
  StatsPayload.Username := '';
end;

type
  ERSBank = (
    POWER_MINE, VARROCK_E, VARROCK_W,
    CRAFTING_GUILD_MINE, MINE_GUILD
  );

  ERSRock = (
    CLAY, TIN, COPPER, IRON, SILVER, COAL, GOLD,
    MITHRIL, ADAMANTITE, RUNITE, AMETHYST
  );

var
  CurrentRock: ERSRock := ERSRock.IRON;
  BankLocation: ERSBank := ERSBank.POWER_MINE;

type
  EMinerState = (
    OPEN_BANK,
    DEPOSIT_ITEMS,
    CLOSE_INTERFACE,

    WALK_SPOT,
    WAIT_STATE,

    EQUIP_GEAR,
    LEVEL_UP,
    USE_SPEC,
    MINE_ROCK,

    DROP_ITEMS,

    END_SCRIPT
  );

  TMiner = record(TBaseBankScript)
    State: EMinerState;

    RSRock: PRSObject;

    ProspectorOutfit: TRSItemArray;
    BankList: TRSItemArray;
    DropList: TRSItemArray;

    Mining: Boolean;
    UseBank: Boolean;
    InvCount: Int32;
    PrevInvCount: Int32;
  end;

procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.MINING, ERSSkill.TOTAL];
  Antiban.MinZoom := 30;
  Antiban.MaxZoom := 60;
end;


procedure TMiner.SetupRock;
begin
  case CurrentRock of
    ERSRock.CLAY:
      begin
        RSRock := @RSObjects.ClayRock;
        ActionProfit := ItemData.GetAverage('Clay');
      end;

    ERSRock.TIN:
    begin
      RSRock := @RSObjects.TinRock;
        ActionProfit := ItemData.GetAverage('Tin ore');
      end;

    ERSRock.COPPER:
      begin
        RSRock := @RSObjects.CopperRock;
        ActionProfit := ItemData.GetAverage('Copper ore');
      end;

    ERSRock.IRON:
      begin
        RSRock := @RSObjects.IronRock; 
        ActionProfit := ItemData.GetAverage('Iron ore');
      end;

    ERSRock.SILVER:
      begin
        RSRock := @RSObjects.SilverRock;
        ActionProfit := ItemData.GetAverage('Silver ore');
      end;

    ERSRock.COAL:
      begin
        RSRock := @RSObjects.CoalRock;
        ActionProfit := ItemData.GetAverage('Coal');
      end;

    ERSRock.GOLD:
      begin
        RSRock := @RSObjects.GoldRock;
        ActionProfit := ItemData.GetAverage('Gold ore');
      end;

    ERSRock.MITHRIL:
      begin
        RSRock := @RSObjects.MithrilRock;
        ActionProfit := ItemData.GetAverage('Mithril ore');
      end;

    ERSRock.ADAMANTITE:
      begin
        RSRock := @RSObjects.AdamantiteRock;
        ActionProfit := ItemData.GetAverage('Adamantite ore');
      end;

    ERSRock.RUNITE:
      begin
        RSRock := @RSObjects.RuniteRock;
        ActionProfit := ItemData.GetAverage('Runite ore');
      end;

    ERSRock.AMETHYST:
      begin
        RSRock := @RSObjects.AmethystRock;
        ActionProfit := ItemData.GetAverage('Amethyst');
      end;
  end;

  RSRock^.Filter.UpText := False;

  DropList := [
    'Clay', 'Tin ore', 'Copper ore',
    'Iron ore', 'Silver ore', 'Gold ore', 'Uncut sapphire'
  ];

  BankList := DropList;

  BankList += 'Uncut emerald';
  BankList += 'Uncut ruby';
  BankList += 'Uncut diamond';

  BankList += 'Coal';
  BankList += 'Mithril ore';
  BankList += 'Adamantite ore';
  BankList += 'Amethyst';
  BankList += 'Unidentified minerals';

  BankList += 'Clue geode (beginner)';
  BankList += 'Clue geode (easy)';
  BankList += 'Clue geode (medium)';
  BankList += 'Clue geode (hard)';
  BankList += 'Clue geode (elite)';

  BankList += 'Clue scroll (beginner)';
  //BankList += 'Clue scroll (easy)';
  //BankList += 'Clue scroll (medium)';
  //BankList += 'Clue scroll (hard)';
  BankList += 12073;
end;

procedure TMiner.SetupBank;
begin

  RSRock^.Filter.Walker := False;

  case BankLocation of
    MINE_GUILD:
      begin
        RSW.Setup('x6291y497');
        ScriptBank := RSObjects.MiningGuildBank;
        UseBank := True;
      end;

    CRAFTING_GUILD_MINE:
      begin
        RSW.Setup('x6953y3166');
        ScriptBank := RSObjects.CraftGuildBank;
        UseBank := True;
      end;

    VARROCK_E:
      begin
        RSW.Setup('x7536y2363');
        ScriptBank := RSObjects.VarrockEastBank;
        UseBank := True;
      end;

    VARROCK_W:
      begin
        RSW.Setup('x7536y2363');
        ScriptBank := RSObjects.VarrockWestBank;
        UseBank := True;
      end;

    POWER_MINE: UseBank := False;
  end;

  if UseBank then
    RSW.ScreenWalk := True;
end;

procedure TMiner.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'AIO Miner';

  inherited;

  Self.SetupRock;
  Self.SetupBank;

  ProspectorOutfit := [
    'Prospector helmet',
    'Prospector jacket',
    'Prospector legs',
    'Prospector boots',
    'Varrock armour 1',
    'Varrock armour 2',
    'Varrock armour 3',
    'Varrock armour 4',
    'Mining gloves',
    'Superior mining gloves',
    'Expert mining gloves',
    'Mining cape',
    'Mining cape(t)',
    'Elven signet',
    'Celestial ring',
    'Celestial signet'
  ];

  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;

  Options.SetZoomLevel(40);

  if Antiban.BioDice then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN)
  else
    Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_RIGHT_CLICK);

  if ScriptDebugEnabled then
  begin
    DebugObjectArray += @ScriptBank;
    DebugObjectArray += RSRock;
  end;
end;


function TMiner.MineRock: Boolean;
begin
  Result := Mining := RSRock^.Click or RSRock^.WalkClick;
  if Result then
  begin
    Minimap.WaitPlayerMoving(300, 10000);
    Wait(1500, 2000);
  end;
end;

function TMiner.HasGear: Boolean;
var
  Item: TRSItem;
begin
  for Item in ProspectorOutfit do
    if Inventory.ContainsItem(Item) then
      Exit(True);

  Result := False;
end;

function TMiner.EquipGear: Boolean;
var
  Item: TRSItem;
begin
  for Item in ProspectorOutfit do
    if Inventory.ClickItem(Item) then
      Wait(200, 300);

  Result := not Self.HasGear;
end;


function TMiner.DropItems: Boolean;
var
  InvCount: Int32 := 28;
begin
  Result := Inventory.ShiftDrop(DropList, Inventory.RandomPattern);

  TotalActions += (InvCount - Inventory.Count);

  if Result then
    WL.Activity.Restart;
end;

function TMiner.Deposit: Boolean;
begin
  Result := Bank.DepositItemArray(BankTab, BankList, True);
  if Result then
    WL.Activity.Restart;
end;


function TMiner.IsMining: Boolean;
begin
  Result := SRL.IsAnimating(MainScreen.GetPlayerBox, MainScreen.ConvertDistance(450), 350, 3);
end;

function TMiner.WaitMining(t: UInt32 = 3000): Boolean;
var
  GotXP: Boolean;
begin
  if Inventory.Count <> PrevInvCount then
  begin
    Mining := False;
    Exit(False);
  end;

  Result := WaitUntil((Mining := Self.IsMining) or (GotXP := XPBar.EarnedXP), 100, t);
  if GotXP then
    Result := Mining := False;
end;


function TMiner.GetState: EMinerState;
begin
  if WL.Activity.IsFinished then
    Exit(EMinerState.END_SCRIPT);

  if Chat.LeveledUp then
  begin
    Mining := False;
    Exit(EMinerState.LEVEL_UP);
  end;

  if MainScreen.HasInterface then
  begin
    if Bank.IsOpen and Inventory.ContainsAny(BankList) then
      Exit(EMinerState.DEPOSIT_ITEMS);

    Exit(EMinerState.CLOSE_INTERFACE);
  end;

  if Self.HasGear then
    Exit(EMinerState.EQUIP_GEAR);

  if Inventory.IsFull then
  begin
    Mining := False;

    if not UseBank then
      Exit(EMinerState.DROP_ITEMS);

    Exit(EMinerState.OPEN_BANK);
  end;

  if Mining then
    Exit(EMinerState.WAIT_STATE);

  if UseBank and not RSW.AtTile(RSRock^.TileArray, 15) then
    Exit(EMinerState.WALK_SPOT);

  if Minimap.IsSpecWeapon and (Minimap.GetSpecLevel = 100) then
    Exit(EMinerState.USE_SPEC);

  Exit(EMinerState.MINE_ROCK);
end;

procedure TMiner.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  repeat
    State := Self.GetState;
    Action := ToStr(State);
    ExtraInfo := ' Bank: ' + ToStr(UseBank) +
                  STR_NEW_LINE +
                 ' Mining: ' + ToStr(Mining);

    Self.ProcessWhileWaiting;

    InvCount := Inventory.Count;

    if InvCount <> PrevInvCount then
      WL.Activity.Restart;

    case State of
      EMinerState.OPEN_BANK: Bank.WalkOpen(ScriptBank);
      EMinerState.DEPOSIT_ITEMS: Self.Deposit;
      EMinerState.CLOSE_INTERFACE: MainScreen.CloseInterface;
      EMinerState.WALK_SPOT: RSW.WebWalk(RSRock^.TileArray, 5, 0.2);
      EMinerState.WAIT_STATE: Self.WaitMining;
      EMinerState.LEVEL_UP: Chat.HandleLevelUp;
      EMinerState.EQUIP_GEAR: Self.EquipGear;
      EMinerState.USE_SPEC: Minimap.EnableSpec(100);
      EMinerState.MINE_ROCK: Self.MineRock;
      EMinerState.DROP_ITEMS: Self.DropItems;
      EMinerState.END_SCRIPT: Break;
    end;

    PrevInvCount := InvCount;

    Self.DoAntiban;
  until Self.ShouldStop;
end;

var
  Miner: TMiner;


function TRSBank.DepositItemArray(Tab: Int32; ItemArray: TRSItemArray; UseQuantityButtons: Boolean): Boolean; override;
var
  Item: TRSItem;
  ItemList: TRSItemArray;
begin
  for Item in ItemArray do
    if Inventory.ContainsItem(Item) then
      ItemList += Item;

  for Item in ItemList do
    Self.DepositItem(Tab, Item, UseQuantityButtons);

  Result := not Inventory.ContainsAny(ItemList);
end;


type
  TMinerConfig = record(TScriptConfig)
    RockSelector: TLabeledCombobox;
    BankSelector: TLabeledCombobox;
  end;

procedure TMinerConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentRock := ERSRock(RockSelector.Combobox.getItemIndex);

  case BankSelector.Combobox.getText of
    'Power mine (mine and drop)': BankLocation := ERSBank.POWER_MINE;
    'P2P Mining Guild':           BankLocation := ERSBank.MINE_GUILD;
    'Crafting guild':             BankLocation := ERSBank.CRAFTING_GUILD_MINE;
    'Varrock west':               BankLocation := ERSBank.VARROCK_W;
    'Varrock east':               BankLocation := ERSBank.VARROCK_E;
  end;
end;


procedure TMinerConfig.RockSelectorOnChange(Sender: TObject);
begin
  Writeln(Sender, ' has changed');

  BankSelector.Clear;

  case ERSRock(RockSelector.Combobox.getItemIndex) of
    ERSRock.CLAY:
      begin
        BankSelector.AddItem('Power mine (mine and drop)');
        BankSelector.AddItem('Crafting guild');
        BankSelector.AddItem('Varrock west');
      end;

    ERSRock.TIN:
      begin
        BankSelector.AddItem('Power mine (mine and drop)');
        BankSelector.AddItem('Varrock east');
        BankSelector.AddItem('Varrock west');
      end;

    ERSRock.COPPER:
      begin
        BankSelector.AddItem('Power mine (mine and drop)');
        BankSelector.AddItem('Varrock east');
      end;

    ERSRock.IRON:
      begin
        BankSelector.AddItem('Power mine (mine and drop)');
        BankSelector.AddItem('P2P Mining Guild');
        BankSelector.AddItem('Varrock east');
        BankSelector.AddItem('Varrock west');
      end;

    ERSRock.SILVER:
      begin
        BankSelector.AddItem('Power mine (mine and drop)');
        BankSelector.AddItem('Crafting guild');
        BankSelector.AddItem('Varrock west');
      end;

    ERSRock.GOLD:
      begin
        BankSelector.AddItem('Power mine (mine and drop)');
        BankSelector.AddItem('Crafting guild');
      end;

    else
      BankSelector.AddItem('P2P Mining Guild');

  end;

  BankSelector.SetItemIndex(0);
end;

procedure TMinerConfig.Setup; override;
begin
  inherited;

  Self.UpdateFormSize(Form.getWidth, Form.getHeight + 30);

  with RockSelector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('Rock type:');
    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    AddItem('Clay');
    AddItem('Tin');
    AddItem('Copper');
    AddItem('Iron');
    AddItem('Silver');
    AddItem('Coal');
    AddItem('Gold');
    AddItem('Mithril');
    AddItem('Adamantite');
    AddItem('Runite (doesn''t hop worlds)');
    AddItem('Amethyst');
    Combobox.setItemIndex(Ord(CurrentRock));
    Combobox.SetOnChange(@Self.RockSelectorOnChange);
  end;

  with BankSelector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('Bank location:');
    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight + 45);
    SetWidth(RockSelector.GetWidth);
    Combobox.setStyle(csDropDownList);
  end;

  Self.RockSelectorOnChange(BankSelector.Combobox);
  StartButton.setOnClick(@Self.StartScript);
end;

procedure TMinerConfig.Run; override;
begin
  Self.Setup;

  inherited;
end;

var MinerConfig: TMinerConfig;

begin
  {$IFDEF SCRIPT_GUI}
    Sync(@MinerConfig.Run);
  {$ENDIF}
  Miner.Run(MaxActions, MaxTime);
end.
