{$UNDEF SCRIPT_ID}{$DEFINE SCRIPT_ID := 'b97a7bdf-4d8b-4cfb-ae20-736a5f238c1e'}
{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '10'}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
  StatsPayload.SetUsername('');
end;

type
  ERSNMZPotion = (
    OVERLOAD_POTION,
    SUPER_RANGING_POTION,
    SUPER_MAGIC_POTION
  );

var
  CurrentPotion := ERSNMZPotion.OVERLOAD_POTION;

type
  ENMZState = (
    //Outside Dream.
    CHECK_COFFER,
    OPEN_COFFER,
    UNLOCK_COFFER,
    OPEN_NMZREWARD,
    BUY_POTS,

    WITHDRAW_BOOST,
    WITHDRAW_ABSORPTION,
    ANSWER_BOOST,
    ANSWER_ABSORPTION,
    DEPOSIT_BOOST,
    DEPOSIT_ABSORPTION,
    HANDLE_DEPOSIT,

    TALK_DOMINIC,
    CHOOSE_DREAM,
    HANDLE_DOMINIC,
    PAY_DOMINIC,

    OPEN_NMZSETUP,
    HANDLE_NMZSETUP,
    CLOSE_INTERFACE,

    //Inside Dream.
    DRINK_BOOST,
    DRINK_ANTIPOISON,
    DRINK_ABSORPTION,

    WALK_MIDDLE,
    ATTACK_NPC,
    WAIT_LEVEL,
    WAIT_SPEC,
    WAIT_CENTER,
    WAIT_STATE,

    USE_POWER,
    USE_SPEC,
    REEQUIP_GEAR,
    LEVELED_UP,

    LOWER_HEALTH,
    FLICK_PRAYER,

    OUT_OF_MONEY,
    END_SCRIPT
  );

  TNMZFighter = record(TBaseWalkerScript)
    State: ENMZState;

    InsideDream, WasInDream, DreamSetup, Boosted, PrayFlick: Boolean;

    DreamMiddle: TPoint;

    Potion: String;
    BoostPotion: TRSItemArray;
    AbsPotion: TRSItemArray;

    BoostBarrel, AbsBarrel: TRSObject;

    BoostAmount, AbsAmount, MinAbsPoints: Int32;

    DamageItem: TRSItem;

    PowerSurgeTimer: TCountDown;
    ZapperTimer: TCountDown;
    BoostTimer: TCountDown;
    PrayFlickTimer: TCountDown;
    WalkMiddleTimer: TCountDown;

    CofferLocked: Boolean;
    CofferChecked: Boolean;
  end;

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.TOTAL];
  Self.MinZoom := 15;
  Self.MaxZoom := 40;

  inherited;
end;

procedure TNMZFighter.SetupPotions();
var
  i: Int32;
  str: String;
begin
  case CurrentPotion of
    OVERLOAD_POTION:      Self.Potion := 'Overload';
    SUPER_RANGING_POTION: Self.Potion := 'Super ranging';
    SUPER_MAGIC_POTION:   Self.Potion := 'Super magic potion';
  end;

  SetLength(Self.BoostPotion, 4);
  for i := 1 to 4 do
  begin
    str := Self.Potion + ' (' + ToStr(i) + ')';
    Self.BoostPotion[i-1] := str;
  end;

  if Potion.Contains('Overload') then
    Self.BoostTimer.Init(300000)
  else
    Self.BoostTimer.Init(420000);

  Self.BoostTimer.Timeout := GetTickCount();
  Self.BoostAmount := 8;

  SetLength(Self.AbsPotion, 4);
  for i := 1 to 4 do
  begin
    str := 'Absorption' + ' (' + ToStr(i) + ')';
    Self.AbsPotion[i-1] := str;
  end;

  Self.AbsAmount := 15;
end;

procedure TNMZFighter.SetupBarrels();
begin
  if Potion.Contains('Overload') then
    BoostBarrel := RSObjects.NMZOverloadBarrel
  else if Potion.Contains('magic') then
    BoostBarrel := RSObjects.NMZSuperMagicBarrel
  else if Potion.Contains('ranging') then
    BoostBarrel := RSObjects.NMZSuperRangingBarrel;

  AbsBarrel := RSObjects.NMZAbsorptionBarrel;
end;

procedure TNMZFighter.SetupTimers();
begin
  DreamMiddle := [5456, 453];

  if PrayFlick then
    PrayFlickTimer.Setup(60000);
  WalkMiddleTimer.Setup(190000 - Round(20000 * BioHash));
end;


procedure TNMZFighter.SetupPowerUps();
begin
  Self.PowerSurgeTimer.Setup(45000);
  Self.ZapperTimer.Setup(65000);  //5 extra seconds for margin.
end;

procedure TNMZFighter.SetupDamageItem();
begin
  if not Inventory.Open() then Exit;

  if Inventory.ContainsItem('Locator orb') then
    DamageItem := 'Locator orb'
  else if Inventory.ContainsItem('Dwarven rock cake') then  //this will use 7509 ID which is hot cake
    DamageItem := 'Dwarven rock cake'
  else if Inventory.ContainsItem(7510) then  //7510 is cold rock cake ID
    DamageItem := 7510;

  if ToStr(DamageItem) = '' then
    TerminateScript('You need either a Locator orb or a Dwarven rock cake to run this script.');

  DebugLn('Damage item is: ' + ToStr(DamageItem));
end;

procedure TNMZFighter.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  inherited;

  Self.RSW.Setup([RSRegions.YANILLE, RSRegions.KBD_AND_NMZ]);

  Self.SetupPotions();
  Self.SetupBarrels();
  Self.SetupPowerUps();

  RSNPCS.AnyNPC.UpText := ['Attack'];
  Self.MinAbsPoints := 250;

  Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_LEFT_CLICK);

  CombatHandler.Setup(True, RSMonsters.AnyMonster, 25000 - Round(15000 * BioHash));
  Combat.SetAutoRetaliate(True);

  Self.SetupDamageItem();

  Self.PrayFlick := Stats.GetCurrentLevel(ERSSkill.PRAYER) > 21;
  Self.SetupTimers();

  if WLSettings.RemoteInput.ScriptDebug then
  begin
    DebugObjectArray += BoostBarrel;
    DebugObjectArray += AbsBarrel;
    DebugObjectArray += RSObjects.NMZChest;
    DebugObjectArray += RSObjects.NMZPotion;

    DebugObjectArray += RSObjects.NMZZapper;
    DebugObjectArray += RSObjects.NMZPowerSurge;
    DebugObjectArray += RSObjects.NMZRecurrentDamage;

    DebugNPCArray += RSNPCs.DominicOnion;
  end;
end;


function TNMZFighter.InDream(): Boolean;
begin
  Self.InsideDream := MainScreen.InMultiCombat();
  Result := Self.InsideDream;

  if Result then
  begin
    Self.WasInDream := True;

    Self.BoostTimer.Resume();
    if Self.PrayFlick then
      Self.PrayFlickTimer.Resume();
    CombatHandler.InCombatTimer.Resume();
    Self.WalkMiddleTimer.Resume();
    Self.PowerSurgeTimer.Resume();
    Self.ZapperTimer.Resume();
    WL.Activity.Restart();
    Exit;
  end;

  if Self.WasInDream then
  begin
    Self.WasInDream := False;
    Self.TotalActions += 1;
  end;

  Self.Boosted := False;
  Self.BoostTimer.Timeout := GetTickCount();
  if Self.PrayFlick then
    Self.PrayFlickTimer.Timeout := GetTickCount();
  CombatHandler.InCombatTimer.Timeout := GetTickCount();
  Self.WalkMiddleTimer.Timeout := GetTickCount();
  Self.PowerSurgeTimer.Timeout := GetTickCount();
  Self.ZapperTimer.Timeout := GetTickCount();
end;


//Outside Dream.
function TNMZFighter.OpenChest(): Boolean;
begin
  if RSObjects.NMZChest.WalkClick then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(MainScreen.IsClassicOpen, 100, 5000);
  end;
end;

function TNMZFighter.HandleChest(): Boolean;
begin
  Result := True;
end;


function TNMZFighter.CountDoses(PotionArray: TRSItemArray): Int32;
var
  i: Int32;
begin
  for i := 0 to High(PotionArray) do
    Result += Inventory.CountItem(PotionArray[i]) * (i + 1);
end;

function TNMZFighter.PotAmountNeeded(Potion: TRSItemArray): Int32;
begin
  if Potion = Self.BoostPotion then
    Result := BoostAmount * 4 - Self.CountDoses(Self.BoostPotion)
  else
    Result := Random(80, 999);
end;


function TNMZFighter.HasEnoughBoost(): Boolean;
begin
  Result := Inventory.CountItem(Self.BoostPotion[3]) = BoostAmount;
end;

function TNMZFighter.HasEnoughAbs(): Boolean;
begin
  Result := Inventory.IsFull or (Inventory.CountItem(AbsPotion[3]) >= AbsAmount);
end;


function TNMZFighter.WithdrawPotion(Barrel: TRSObject): Boolean;
var
  Str: String;
begin
  case Barrel of
    BoostBarrel: Str := 'Take ' + Potion;
    AbsBarrel:   Str := 'Take Absorption';
  end;

  if Barrel.WalkSelectOption([Str]) then
  begin
    Minimap.WaitMoving();
    Result := Chat.FindQuery('How many doses', 5000, 100);
  end;
end;

function TNMZFighter.DepositPotion(Barrel: TRSObject): Boolean;
begin
  if Barrel.WalkSelectOption(['Store']) then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil('Store' in Chat.GetChatTitle, 5000, 100);
  end;
end;

function TNMZFighter.HandleQuery(Amount: Int32): Boolean;
var
  InvCount: Int32 := Inventory.Count;
begin
  Chat.AnswerQuery('How many', ToStr(Amount), 2000, 100);
  Result := WaitUntil(InvCount <> Inventory.Count, 100, 3000);
end;

function TNMZFighter.TalkWithDominic(): Boolean;
begin
  if RSNPCs.DominicOnion.WalkSelectOption(['Dream']) then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil('dream would' in Chat.GetChatTitle, 100, 3000);
  end;
end;

function TNMZFighter.HandlePayment(): Boolean;
begin
  if Chat.ClickOption('Yes') then
    Self.DreamSetup := WaitUntil(not ('Agree' in Chat.GetChatTitle), 100, 3000);

  Result := Self.DreamSetup;
end;

function TNMZFighter.OpenNMZSetup(): Boolean;
begin
  if RSObjects.NMZPotion.WalkClick then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(MainScreen.IsClassicOpen, 100, 5000);
  end;
end;

function TNMZFighter.HandleNMZSetup(): Boolean;
var
  TPA: TPointArray;
begin
  if SRL.FindColors(TPA, CTS0(65280, 0), InterfaceArea.Bounds) then
  begin
    Mouse.Move(TPA.Bounds);
    MainScreen.IsUpText('Continue');
    Mouse.Click(MOUSE_LEFT);
    Result := WaitUntil(Self.InDream, 200, 10000);
  end;
end;


function TNMZFighter.CheckCoffer(): Boolean;
begin
  if RSObjects.NMZCoffer.WalkHover then
  begin
    Result := Self.CofferLocked := MainScreen.IsUpText('Unlock');
    Self.CofferChecked := True;
  end;
end;

function TNMZFighter.OpenCoffer(): Boolean;
begin
  if RSObjects.NMZCoffer.WalkClick then
  begin
    Minimap.WaitMoving();
    Result := Self.CofferLocked := BankPin.IsOpen(10000);
  end;
end;


//Inside Dream.
function TNMZFighter.HasBoostPot(): Boolean;
var
  PotDose: TRSItem;
  Slots: TIntegerArray;
begin
  if not Inventory.Open then Exit;

  for PotDose in Self.BoostPotion do
    Inventory.FindItem(PotDose, Slots);

  Result := Slots <> [];
end;

function TNMZFighter.NeedBoost(): Boolean;
var
  PotStr: String := ToStr(Self.BoostPotion[0]);
begin
  if not Self.HasBoostPot then
    Exit;

  if PotStr.Contains('Overload') then
    Self.Boosted := Minimap.GetHPLevel() <= 50
  else if BoostTimer.IsFinished() then
    Self.Boosted := False;
  
  Result := not Self.Boosted;
end;

function TNMZFighter.GetAbsorptionPoints(): Int32;
var
  B: TBox;
begin
  case RSClient.Mode of
    ERSClientMode.FIXED: B := [10, 57, 63, 76];
    ERSClientMode.RESIZABLE_CLASSIC,
    ERSClientMode.RESIZABLE_MODERN: B := [10, 53, 63, 72];
  end;

  Result := OCR.RecognizeNumber(B, TOCRShadowRule.Create(20), RS_FONT_QUILL);
end;

function TNMZFighter.NeedAbsorption(): Boolean;
begin
  Result := (Self.GetAbsorptionPoints() < Self.MinAbsPoints) and Inventory.ContainsAny(Self.AbsPotion);
end;

function TNMZFighter.NeedLowerHP(hpLevel: Int32 = -1): Boolean;
var
  str: String;
begin
  if not Self.InDream() then
    Exit;

  if hpLevel = -1 then
    hpLevel := Minimap.GetHPLevel(); //if we don't pass a value in, set it.

  if hpLevel = 1 then
    Exit(False);

  str := ToStr(Self.BoostPotion[0]);
  if (str.Contains('Overload') and Self.HasBoostPot()) then
    Result := (Self.Boosted or (hpLevel < 51))
  else
    Result := True;
end;


function TNMZFighter.LowerHealth(): Boolean;
var
  slot: Int32;
  slotOption: String;
  currentHP, newHP: Int32;
begin
  if not Inventory.Open() then
    Exit;

  if ToStr(Self.DamageItem) <> 'Locator orb' then
    slotOption := 'Guzzle';

  if Inventory.FindItem(Self.DamageItem, slot) then
  begin
    currentHP := Minimap.GetHPLevel();
    while Self.NeedLowerHP(currentHP) do
    begin
      Inventory.ClickSlot(slot, slotOption);
      Wait(100);

      if not WaitUntil(currentHP > (newHP := Minimap.GetHPLevel()), 100, 1500) then
        Antiban.SmallRandomMouse();

      CurrentHP := NewHP;
    end;
  end;

  Result := currentHP = 1;
end;

function TNMZFighter.DrinkPotion(potionArray: TRSItemArray): Boolean;
var
  doseCount: Int32 := Self.CountDoses(potionArray);
  i, slot, currentHP: Int32;
  PotStr: String := ToStr(potionArray[0]);
begin
  if not Inventory.Open then
    Exit;

  for i := 0 to High(potionArray) do
  begin
    if Inventory.FindItem(potionArray[i], slot) then
      Break
    else if i = High(potionArray) then
      Exit;
  end;

  if PotStr.Contains('Overload') then
    currentHP := Minimap.GetHPLevel();

  if Inventory.ClickSlot(slot) then
    Result := WaitUntil(
                Self.CountDoses(potionArray) < doseCount, 100, 2000);

  if (potionArray = Self.BoostPotion) then
  begin
    if PotStr.Contains('Overload') then
      Result := WaitUntil(Minimap.GetHPLevel() < currentHP, 100, 4000)
    else
      Wait(1200, 1600);
  end;

  if Result then
  begin
    if (potionArray = Self.BoostPotion) then
    begin
      if PotStr.Contains('Overload') then
        if not WaitUntil(Minimap.GetHPLevel() <= (currentHP - 45), 100, 12000) then
          Exit(False);

      Boosted := True;
      BoostTimer.Restart(Random(1000, 15000));
    end

    else
      MinAbsPoints := Random(300, 940);
  end;
end;

function TNMZFighter.FlickPrayer(): Boolean;
begin
  if Minimap.IsPrayerEnabled then
    Result := Minimap.DisablePrayer
  else if Minimap.EnablePrayer then
  begin
    Wait(600, 800);
    Result := Minimap.DisablePrayer;
  end;

  if Result and PrayFlick then
    PrayFlickTimer.Restart(Random(-20000, 20000));
end;


function TNMZFighter.PowerUpAvailable(): Boolean;
begin
  Result := RSObjects.NMZRecurrentDamage.Find or
            RSObjects.NMZPowerSurge.Find or
            (ZapperTimer.IsFinished() and RSObjects.NMZZapper.Find);
end;

function TNMZFighter.GetPowerUp(): Boolean;
begin
  if RSObjects.NMZRecurrentDamage.Click() then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(not Self.PowerUpAvailable(), 100, 6000);
  end
  else if RSObjects.NMZPowerSurge.Click() then
  begin
    Minimap.WaitMoving();
    if Result := WaitUntil(not Self.PowerUpAvailable(), 100, 6000) then
      PowerSurgeTimer.Restart();
  end
  else if Result := RSObjects.NMZZapper.Click() then
  begin
    Minimap.WaitMoving();
    ZapperTimer.Restart();
  end;
end;


function TNMZFighter.GetDreamState(): ENMZState;
begin
  Self.DreamSetup := False;

  if CombatHandler.NeedAntiPoison() then
    Exit(DRINK_ANTIPOISON);

  if Self.NeedAbsorption() then
    Exit(DRINK_ABSORPTION);

  if Chat.LeveledUp() then
    Exit(WAIT_LEVEL);

  if Self.NeedBoost() then
    Exit(DRINK_BOOST);

  if Self.NeedLowerHP() then
    Exit(LOWER_HEALTH);

  if Self.PrayFlick and Self.PrayFlickTimer.IsFinished() then
    Exit(FLICK_PRAYER);

  if not MainScreen.WaitInCombat(600) then
    Exit(ATTACK_NPC);

  if CombatHandler.CanSpec() then
    Exit(USE_SPEC);

  if Minimap.IsSpecEnabled() then
    Exit(WAIT_SPEC);

  if CombatHandler.NeedRegear() then
    Exit(REEQUIP_GEAR);

  if Self.RSW.AtTile(Self.DreamMiddle, 30) or not Self.WalkMiddleTimer.IsFinished() then
  begin
    if Self.PowerUpAvailable() then
      Exit(USE_POWER);
    if not MainScreen.InCombat() then
      Exit(ATTACK_NPC);

    Exit(WAIT_CENTER);
  end;

  if Self.WalkMiddleTimer.IsFinished() then
    Exit(WALK_MIDDLE);

  Exit(WAIT_STATE);
end;

function TNMZFighter.GetRealLifeState(): ENMZState;
var
  query: String; //to cache the query and title.
  title: String; //not doing multiple checks improves performance.
  chatCache: String;
begin
  if WL.Activity.IsFinished() then
    Exit(END_SCRIPT);

  query := Chat.GetQuery();
  title := Chat.GetChatTitle();

  if CombatHandler.NeedRegear() then
    Exit(REEQUIP_GEAR);

  if not Self.CofferChecked then
    Exit(CHECK_COFFER);

  if MainScreen.IsClassicOpen() then
  begin
    if BankPin.IsOpen() then
      Exit(UNLOCK_COFFER);

    Exit(HANDLE_NMZSETUP);
  end;

  if Self.CofferLocked then
    Exit(OPEN_COFFER);

  if 'How many doses' in query then
  begin
    if not Self.HasEnoughBoost() then
    begin
      if LowerCase(Self.Potion) in query then
        Exit(ANSWER_BOOST);

      Exit(WITHDRAW_BOOST);
    end;

    if not Self.HasEnoughAbs() then
    begin
      if 'absorption' in query then
        Exit(ANSWER_ABSORPTION);

      Exit(WITHDRAW_ABSORPTION);
    end;

    if Self.DreamSetup then
      Exit(OPEN_NMZSETUP);

    Exit(TALK_DOMINIC);
  end;

  if not Self.HasEnoughBoost() then
  begin
    if Inventory.CountItem(Self.BoostPotion[3]) > BoostAmount then
    begin
      if Potion.Lower() in title then
        Exit(HANDLE_DEPOSIT);

      Exit(DEPOSIT_BOOST);
    end;

    if Inventory.CountItem(Self.BoostPotion[3]) < BoostAmount then
      Exit(WITHDRAW_BOOST);
  end;

  if not Self.HasEnoughAbs() then
    Exit(WITHDRAW_ABSORPTION);

  if Self.DreamSetup then
  begin
    if 'When you purchase' in Chat.GetChat() then
    begin
      Self.DreamSetup := False;
      Exit(TALK_DOMINIC);
    end;

    Exit(OPEN_NMZSETUP);
  end;

  if 'dream would' in title then
    Exit(CHOOSE_DREAM);

  if ('Dominic' in title) then
  begin
    chatCache := Chat.GetChat();

    if 'Ill want' in chatCache then
    begin
      if 'deduct the money' in chatCache then
        Exit(HANDLE_DOMINIC);

      Exit(OUT_OF_MONEY);
    end;
  end;

  if 'Agree' in title then
    Exit(PAY_DOMINIC);

  Exit(TALK_DOMINIC);
end;

function TNMZFighter.GetState(): ENMZState;
begin
  if Self.InDream then
    Exit(Self.GetDreamState());

  Result := Self.GetRealLifeState();
end;

procedure TNMZFighter.Run(MaxActions: Int32; MaxTime: Int64);
begin
  Self.Init(MaxActions, MaxTime);

  repeat
    Self.State := Self.GetState();
    Self.SetAction(ToStr(Self.State));

    case State of
      //Outside Dream.
      CHECK_COFFER: Self.CheckCoffer();
      OPEN_COFFER: Self.OpenCoffer();
      UNLOCK_COFFER: BankPin.Enter(Login.GetPlayerPin());

      OPEN_NMZREWARD: Self.OpenChest();
      BUY_POTS: Self.HandleChest();

      WITHDRAW_BOOST: Self.WithdrawPotion(BoostBarrel);
      WITHDRAW_ABSORPTION: Self.WithdrawPotion(AbsBarrel);

      ANSWER_BOOST: Self.HandleQuery(Self.PotAmountNeeded(Self.BoostPotion));
      ANSWER_ABSORPTION: Self.HandleQuery(Self.PotAmountNeeded(AbsPotion));

      DEPOSIT_BOOST: Self.DepositPotion(BoostBarrel);
      DEPOSIT_ABSORPTION: Self.DepositPotion(AbsBarrel);
      HANDLE_DEPOSIT: Chat.ClickOption('Yes');

      TALK_DOMINIC: Self.TalkWithDominic;
      CHOOSE_DREAM: Chat.ClickOption('Previous', False);
      HANDLE_DOMINIC: Chat.ClickContinue();
      PAY_DOMINIC: Self.HandlePayment();

      OPEN_NMZSETUP: Self.OpenNMZSetup();
      HANDLE_NMZSETUP: Self.HandleNMZSetup();
      CLOSE_INTERFACE: MainScreen.CloseInterface();

      //Inside Dream.
      DRINK_BOOST: Self.DrinkPotion(Self.BoostPotion);
      DRINK_ABSORPTION: Self.DrinkPotion(Self.AbsPotion);
      DRINK_ANTIPOISON: Inventory.Consume(ERSConsumable.POISON_CONSUMABLE);

      WALK_MIDDLE: if RSW.WebWalk(Self.DreamMiddle, 5, 0.2) then Self.WalkMiddleTimer.Restart();
      ATTACK_NPC: CombatHandler.AttackMonster();
      WAIT_LEVEL, WAIT_SPEC, WAIT_CENTER, WAIT_STATE : XPBar.WaitXP(1200);

      USE_POWER: Self.GetPowerUp();
      USE_SPEC: CombatHandler.DoSpec();
      REEQUIP_GEAR: CombatHandler.ReGear();

      LOWER_HEALTH: Self.LowerHealth();
      FLICK_PRAYER: Self.FlickPrayer();

      OUT_OF_MONEY, END_SCRIPT: Break;
    end;

    if Self.InsideDream then
    begin
      if PowerSurgeTimer.IsFinished() then
        Self.DoAntiban(False, False);
    end
    else
      Self.DoAntiban();
  until Self.ShouldStop();
end;

var
  NMZFighter: TNMZFighter;

function TRSBankPin.Enter(Pin: String): Boolean; override;

  function GetDigitToEnter: Char;
  begin
    if OCR.LocateText(Self.Bounds, 'FIRST',  RS_FONT_BOLD_12, TOCRColorRule.Create([$FFFFFF]), 1) then Exit(Pin[1]);
    if OCR.LocateText(Self.Bounds, 'SECOND', RS_FONT_BOLD_12, TOCRColorRule.Create([$FFFFFF]), 1) then Exit(Pin[2]);
    if OCR.LocateText(Self.Bounds, 'THIRD',  RS_FONT_BOLD_12, TOCRColorRule.Create([$FFFFFF]), 1) then Exit(Pin[3]);
    if OCR.LocateText(Self.Bounds, 'FOURTH', RS_FONT_BOLD_12, TOCRColorRule.Create([$FFFFFF]), 1) then Exit(Pin[4]);
  end;

var
  I: Int32;
  Digit: Char;
begin
  for 1 to 3 do // 3 Attempts
  begin
    for I := 1 to 4 do
    begin
      Digit := GetDigitToEnter;
      if Digit = '' then
        Break;

      if not Self.ClickDigit(Digit) then
        Break;

      Wait(1000, 2000, wdLeft);
    end;

    if WaitUntil(not BankPin.IsOpen(), 100, 3000) then
    begin
      NMZFighter.CofferLocked := False;
      Exit(True);
    end;
  end;

  Result := WaitUntil(not BankPin.IsOpen(), 100, 3000); // wait 3 extra seconds before failing.
  NMZFighter.CofferLocked := not Result;
end;

function TRSLogin.LoginPlayer(): Boolean; override;
begin
  Result := inherited;

  NMZFighter.CofferChecked := False;
end;

//override to move the camera less.
function TRSObject._HoverHelper(Attempts: Int32): Boolean; override;
var
  Attempt: Int32;
  ATPA: T2DPointArray;
  Points: TPointArray;
begin
  for Attempt := 0 to Attempts do
  begin
    if Filter.UpText and MainScreen.IsUpText(UpText) then
      Exit(True);

    if Self.Find(ATPA) then
    begin
      if Attempt < 2 then
        Points := ATPA[0] // 0 for the closest one.
      else
        Points := ATPA[Random(0, High(ATPA))];

      if Points <> [] then
      begin
        Mouse.Move(Points[Random(0, High(Points))]);
        if not Filter.UpText then
          Exit(True);
      end;
    end
    else Exit(False);
  end;
end;

function TCombatHandler.NeedRegear(): Boolean; override;
begin
  if not Self.ManageGear or not Self.GearIsSetup then
    Exit;

  if not NMZFighter.PowerSurgeTimer.IsFinished() or (Minimap.GetSpecLevel() >= Self.WeaponSpec) then
    Exit;

  Result := ((Self.Weapon <> 'Null') and Inventory.ContainsItem(Self.Weapon)) or
            ((Self.Shield <> 'Null') and Inventory.ContainsItem(Self.Shield));
end;

function TCombatHandler.DoSpec(): Boolean; override;
begin
  if Self.ManageGear and not Self.GearIsSetup then
  begin
    Self._SetupGear();
    Self.ManageGear := Self.GearIsSetup;
    if not Self.GearIsSetup then
      Exit;
  end;

  if (Self.SpecWeapon <> Self.Weapon) and Inventory.ClickItem(Self.SpecWeapon) then
    if not WaitUntil(Inventory.ContainsItem(Self.Weapon), 100, 4000) then
      Exit;

  Self.InCombatTimer.Timeout := GetTickCount();
  Result := Self.DoingSpec := Minimap.EnableSpec(Self.WeaponSpec);

  case Self.SpecWeapon of
    'Granite maul', '4153', '12848':
      begin
        Result := Self.DoingSpec := True;
        Wait(50, 100);
      end;
    else
      Wait(300, 400);
  end;

  if Result and NMZFighter.PowerSurgeTimer.IsFinished() and (Minimap.GetSpecLevel() < Self.WeaponSpec) then
    Self.Regear();
end;

{$IFDEF SCRIPT_GUI}
type
  TNMZConfig = record(TScriptForm)
    PotionSelector: TLabeledCombobox;
    NMZInfo: TLabel;
  end;

procedure TNMZConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentPotion := ERSNMZPotion(Self.PotionSelector.Combobox.getItemIndex())
end;

procedure TNMZConfig.Setup(); override;
begin
  inherited;

  with Self.PotionSelector do
  begin
    Init(Self.SSPanel.Panel);
    SetCaption('NMZ Self.Potion:');
    SetLeft(5);
    SetTop(35);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    AddItem('Overload');
    AddItem('Super ranging');
    AddItem('Super magic');
    Combobox.setItemIndex(Ord(CurrentPotion));
  end;

  with Self.NMZInfo do
  begin
    Init(Self.SSPanel.Panel);
    setParent(Self.SSPanel.Panel);

    SetCaption('Should work with most setups.' +
                LineEnding +
               'Start with Main Weapon + Shield equipped and Spec Weapon in the inventory.');

    SetLeft(5);
    SetTop(Self.PotionSelector.Combobox.GetTop() + Self.PotionSelector.Combobox.GetHeight() + 2);
  end;

  Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
end;

procedure TNMZConfig.Run(); override;
begin
  Self.Setup();

  inherited;
end;

var
  NMZConfig: TNMZConfig;
{$ENDIF}

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@NMZConfig.Run);
  {$ENDIF}
  NMZFighter.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
