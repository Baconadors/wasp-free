{$DEFINE SCRIPT_ID := 'de957f22-8a37-4660-a7a3-9bef52cadd70'}
{$DEFINE SCRIPT_REVISION := '23'}
{$IFNDEF SCRIPT_CHAIN}
  {$IFDEF WINDOWS}{$DEFINE FORMS_V2}{$DEFINE SCRIPT_GUI}{$ENDIF}
  {$I SRL-T/osr.simba}
  {$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
end;
{$ENDIF}

type
  ERSLocation = (HOSIDIUS, ROGUES_DEN);

const
  RawFood: TRSItemArray = [
    'Custom',
    'Meat',
    'Shrimps',
    'Chicken',
    'Rabbit',
    'Anchovies',
    'Sardine',
    'Herring',
    'Mackerel',
    'Trout',
    'Cod',
    'Pike',
    'Salmon',
    'Tuna',
    'Karambwan',
    'Rainbow fish',
    'Lobster',
    'Bass',
    'Swordfish',
    'Monkfish',
    'Shark',
    'Sea turtle',
    'Anglerfish',
    'Dark crab',
    'Manta ray'
  ];

var
  CurrentFood: TRSItem   := 'Anglerfish';
  CurrentLocation := ERSLocation.HOSIDIUS;

type
  ECookerState = (
    OPEN_BANK,
    WITHDRAW_ITEMS,
    DEPOSIT_ITEMS,

    OPEN_COLLECT,
    HANDLE_COLLECT,
    CLOSE_INTERFACE,

    DO_COOKING,
    HANDLE_MAKE,
    WAIT_COOKING,

    LEVEL_UP,
    CLOSE_CONTEXT,

    END_SCRIPT
  );

  TCooker = record(TBaseBankScript)
    State: ECookerState;

    Food: TRSItem;
    Ingredient: TRSBankWithdrawItem;
    Products: array of TRSBankDepositItem;

    CookingObj: TRSObject;

    Cooking: Boolean;
    UsingFire: Boolean;
  end;


procedure TCooker.SetupItems();
var
  CookedPrefix: TStringArray;
  BurntFish: TStringArray;
begin
  Food := CurrentFood;

  if ToStr(Food).Lower = 'shark' then
    ItemFinder.Similarity := 0.9999;

  CookedPrefix := ['chicken', 'rabbit', 'meat', 'crab meat',
                   'karambwan', 'chompy', 'fishcake', 'jubbly', 'sweetcorn'];

  BurntFish := ['herring', 'mackerel', 'sardine', 'anchovies',
                'giant carp', 'trout', 'cod', 'pike', 'salmon', 'tuna', 'bass'];

  Ingredient := [('Raw ' + ToStr(Food).Lower()), BANK_WITHDRAW_ALL, False];

  if (CookedPrefix.Find(LowerCase(Food)) > -1) then
    Products := [
      ['Cooked ' + ToStr(Food).Lower, BANK_DEPOSIT_ALL],
      ['Burnt ' + ToStr(Food).Lower, BANK_DEPOSIT_ALL]]
  else if (BurntFish.Find(LowerCase(Food)) > -1) then
    Products := [
      [Food, BANK_DEPOSIT_ALL],
      ['Burnt fish', BANK_DEPOSIT_ALL]]
  else
    Products := [
      [Food, BANK_DEPOSIT_ALL],
      ['Burnt ' + ToStr(Food).Lower, BANK_DEPOSIT_ALL]];

  ActionProfit := (
    ItemData.GetAverage(Products[0].Item) -
    ItemData.GetAverage(Ingredient.Item)
  );
end;

procedure TCooker.SetupLocation();
begin
  case CurrentLocation of
    ERSLocation.HOSIDIUS:
      begin
        RSW.Setup([RSRegions.HOSIDIUS_KITCHEN]);
        CookingObj := RSObjects.HosidiusKitchenOven;
      end;

    ERSLocation.ROGUES_DEN:
      begin
        RSW.Setup([RSRegions.ROGUES_DEN]);
        RSNPCs.EmeraldBenedict.Filter.Finder := False;

        RSObjects.EternalFire.Filter.Finder := False;
        RSObjects.EternalFire.Filter.UpText := False;
        CookingObj := RSObjects.EternalFire;
      end;
  end;

end;

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.COOKING, ERSSkill.TOTAL];
  Self.MinZoom := 15;
  Self.MaxZoom := 60;

  inherited;
end;

procedure TCooker.Init(maxActions: Int32; maxTime: Int64); override;
begin
  inherited;

  Self.SetupItems();
  Self.SetupLocation();

  if WLSettings.RemoteInput.HUDDebug then
    DebugObjectArray += CookingObj;
end;


function TCooker.HasProducts(): Boolean; overload;
var
  Product: TRSBankDepositItem;
  Slots: TIntegerArray;
begin
  for Product in Products do
    if not Inventory.FindItem(Product.Item, Slots) then
      Exit(False);

  Result := True;
end;

function TCooker.OpenBank(): Boolean;
begin
  case CurrentLocation of
    ERSLocation.HOSIDIUS:   Result := Bank.WalkOpen();
    ERSLocation.ROGUES_DEN: Result := Bank.WalkOpen(RSNPCs.EmeraldBenedict);
  end;
end;


function TCooker.Deposit(): Boolean;
var
  InvCount: Int32 := Inventory.Count;
  Product: TRSBankDepositItem;
begin
  Self.TotalActions += InvCount;
  Self.TotalProfit := Self.TotalActions * Self.ActionProfit;

  for Product in Products do
  begin
    if not Bank.DepositItem(BankTab, Product, True) then
      Exit(False);
    WaitUntil((InvCount > Inventory.Count), 50, 2000);
    InvCount := Inventory.Count;
  end;

  Result := True;
end;


function TCooker.DoCooking(): Boolean;
begin
  if CookingObj.WalkSelectOption(['Cook', 'Fire']) then
  begin
    Minimap.WaitPlayerMoving(300, 3000);
    Result := Make.IsOpen(4000);
  end;
end;

function TCooker.HandleMake(): Boolean;
var
  i: Int32 := 0;
begin
  if not Make.IsOpen then //not sure if I can remove this.
    Exit;                 //it's probably not needed.

  if 'arambwan' in Food then
    i := 1;

  Result := Cooking := Make.Select(i, MAKE_QUANTITY_ALL, Antiban.BioDice);
  
  if Result then
    WaitUntil(not Make.IsOpen, 100, 4000);  
end;

function TCooker.IsCooking(WaitTime: Int32 = 2500): Boolean;
var
  ItemCount: Int32 := Inventory.CountItem(Ingredient.Item);
begin
  if ItemCount = 0 then Exit;

  if Result := WaitUntil(ItemCount > Inventory.CountItem(Ingredient.Item), 100, WaitTime) then
    WL.Activity.Restart();
end;

function TCooker.WaitCooking(): Boolean;
begin
  Result := Cooking := Self.IsCooking
end;


function TCooker.GetState(): ECookerState;
begin
  if WL.Activity.IsFinished() then
    Exit(ECookerState.END_SCRIPT);

  if ChooseOption.IsOpen() then
    Exit(ECookerState.CLOSE_CONTEXT);

  if XPBar.EarnedXP() then
    Exit(ECookerState.WAIT_COOKING);

  if Chat.LeveledUp() then
  begin
    Cooking := False;
    Exit(ECookerState.LEVEL_UP);
  end;

  if Make.IsOpen() then
    Exit(ECookerState.HANDLE_MAKE);

  if MainScreen.HasInterface() then
  begin
    if Bank.IsOpen() then
    begin
      if Self.HasProducts() then
        Exit(ECookerState.DEPOSIT_ITEMS);

      if BankEmpty or Inventory.ContainsItem(Ingredient.Item) then
        Exit(ECookerState.CLOSE_INTERFACE);

      Exit(ECookerState.WITHDRAW_ITEMS);
    end;

    if CollectBox.IsOpen() then
    begin
      if CollectEmpty or Inventory.ContainsItem(Ingredient.Item) then
        Exit(ECookerState.CLOSE_INTERFACE);

      Exit(ECookerState.HANDLE_COLLECT);
    end;

    Exit(ECookerState.CLOSE_INTERFACE);
  end;

  if Inventory.ContainsItem(Ingredient.Item) then
  begin
    if Cooking then
      Exit(ECookerState.WAIT_COOKING);

    Exit(ECookerState.DO_COOKING);
  end;

  if BankEmpty and CollectEmpty then
    Exit(ECookerState.END_SCRIPT);

  if BankEmpty then
    Exit(ECookerState.OPEN_COLLECT);

  Exit(ECookerState.OPEN_BANK);
end;

function TCooker.Terminate(): Boolean; override;
begin
  Result := inherited();
  if Result then
    for 0 to 5 do
      if Result := Bank.WithdrawItem(BankTab, [Products[0].Item, BANK_WITHDRAW_ALL, True], True) then
        Break;
end;

procedure TCooker.Run(maxActions: Int32; maxTime: Int64);
begin
  Self.Init(maxActions, maxTime);

  repeat
    State := Self.GetState();
    Self.SetAction(ToStr(State));

    case State of
      ECookerState.OPEN_BANK: Self.OpenBank();
      ECookerState.WITHDRAW_ITEMS: Self.Withdraw(Ingredient);
      ECookerState.DEPOSIT_ITEMS: Self.Deposit();

      ECookerState.OPEN_COLLECT: CollectBox.WalkOpen();
      ECookerState.HANDLE_COLLECT: Self.HandleCollectBox([Ingredient.Item]);
      ECookerState.CLOSE_INTERFACE: MainScreen.CloseInterface();

      ECookerState.LEVEL_UP: Chat.HandleLevelUp();
      ECookerState.DO_COOKING: Self.DoCooking();
      ECookerState.HANDLE_MAKE: Self.HandleMake();
      ECookerState.WAIT_COOKING: Self.WaitCooking();
      ECookerState.CLOSE_CONTEXT: ChooseOption.Close();

      ECookerState.END_SCRIPT: Break;
    end;

    Self.DoAntiban();
  until Self.ShouldStop();

  if not Self.Terminate then
    TerminateScript('aio_cooker didn''t terminate properly. Stopping execution.');
end;

var
  Cooker: TCooker;

function TRSMake.Select(Index: Int32; Quantity: Int32; UseKeyboard: Boolean = True): Boolean; override;
var
  Buttons: TRSButtonArray;
begin
  Buttons := Self.GetItemButtons();
  if Index <= High(Buttons) then
    Result := Self.SelectHelper(Buttons[Index], Quantity, UseKeyboard);
end;


{$IFNDEF SCRIPT_CHAIN}
{$IFDEF SCRIPT_GUI}
type
  TCookerConfig = record(TScriptForm)
    LocSelector: TLabeledCombobox;
    CustomFoodName: TLabeledEdit;
    FoodSelector: TLabeledCombobox;
  end;

procedure TCookerConfig.StartScript(sender: TObject); override;
begin
  CurrentLocation := ERSLocation(Self.LocSelector.GetItemIndex());
  if Self.FoodSelector.GetText() = 'Custom' then
    CurrentFood := Self.CustomFoodName.GetText()
  else
    CurrentFood := Self.FoodSelector.GetText();

  inherited;
end;

procedure TCookerConfig.FoodSelectorOnChange(sender: TObject);
var
  combobox: TComboBox;
begin
  combobox := sender;
  Self.CustomFoodName.SetVisible(combobox.getText() = 'Custom');
end;

procedure TCookerConfig.Run(); override;
var
  tab: TTabSheet;
begin
  Self.Setup('Wasp Cooker');
  Self.Start.setOnClick(@Self.StartScript);

  Self.AddTab('Script Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  Self.CreateAccountManager(tab);

  with Self.LocSelector do
  begin
    Create(tab);
    SetCaption('Location:');
    SetLeft(TControl.AdjustToDPI(20));
    SetTop(TControl.AdjustToDPI(200));
    SetWidth(TControl.AdjustToDPI(200));
    SetStyle(csDropDownList);
    AddItem('Hosidius kitchen');
    AddItem('Rogues den');
    SetItemIndex(Ord(CurrentLocation));
  end;

  with Self.FoodSelector do
  begin
    Create(tab);
    SetCaption('Food type:');
    SetLeft(Self.LocSelector.GetRight() + TControl.AdjustToDPI(20));
    SetTop(Self.LocSelector.GetTop());
    SetWidth(TControl.AdjustToDPI(200));
    SetStyle(csDropDownList);
    AddItemArray(RawFood);
    SetItemIndex(0);
    Combobox.setOnChange(@Self.FoodSelectorOnChange);
  end;

  with Self.CustomFoodName do
  begin
    Create(tab);
    SetCaption('Food name (must be the exact name):');
    SetLeft(Self.FoodSelector.GetRight() + TControl.AdjustToDPI(20));
    SetTop(Self.LocSelector.GetTop());
    SetWidth(TControl.AdjustToDPI(200));
    SetText(CurrentFood);
    SetVisible(Self.FoodSelector.GetText() = 'Custom');
  end;

  Self.CreateVersionPanel(tab);
  Self.CreateAntibanManager();
  Self.CreateWaspLibSettings();
  Self.CreateAPISettings();

  inherited;
end;

var
  CookerConfig: TCookerConfig;
{$ENDIF}
{$ENDIF}

{$IFNDEF SCRIPT_CHAIN}
begin
  {$IFDEF SCRIPT_GUI}
  CookerConfig.Run();
  {$ENDIF}
  Cooker.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
{$ENDIF}
